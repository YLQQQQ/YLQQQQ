<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YLQQ のBLOG</title>
  
  <subtitle>一天不敲代码就难受的小叶</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-28T15:11:39.079Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YLQQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>典题几道</title>
    <link href="http://example.com/posts/8176/"/>
    <id>http://example.com/posts/8176/</id>
    <published>2023-03-28T14:01:50.000Z</published>
    <updated>2023-03-28T15:11:39.079Z</updated>
    
    <content type="html"><![CDATA[<p>算是最近做的几道题里觉得值得回顾一下的吧</p><span id="more"></span><p><a href="https://atcoder.jp/contests/abc295/tasks/abc295_d">ABC295_D</a><br>题意：给定一个由0~9组成的字符串S, 且$|S| &lt;= 5e5$，求存在多少个$l,r$满足$S_l,…S_r$中满足每个数字出现偶数次个</p><p>思路：假设我们只考虑 $l$ 到 $r$ 中的一种数字，如果我们求该数字的个数前缀和，如果满足题意的话那么 $sum[r] - sum[l - 1] = 0 (mod 0) $，那么显然这俩个的奇偶性是相同的。<br>那么我们可以用map来从前往后记录每种出现的状态的个数，用pre[i][j]来记录数字i到j位置出现的个数。<br>长度为10的状态st表示每一个数字出现个数的奇偶性</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i, n, m) for(int i = n; i &lt;= m; ++i)#define per(i, n, m) for(int i = n; i &gt;= m; --i)#define ll long longusing namespace std;const int N = 5e5 + 10;string st;int pre[10][N];ll ans;map&lt;string, int&gt; p;void cal(int u)&#123;    rep(i, 0, 9) st[i] = pre[i][u] % 2 + &#39;0&#39;;    //更新当前每个状态出现个数的奇偶性    if(p.count(st))ans += 1ll * p[st];    p[st] ++;&#125;int main()&#123;    string s; cin &gt;&gt; s;    int n = s.size(); s = &#39; &#39; + s;    st.resize(10); //初始化状态st    rep(i, 0, 9) st[i] = &#39;0&#39;;    p[st] ++;     rep(i, 1, n)&#123;        rep(j, 0, 9)&#123;            pre[j][i] = pre[j][i - 1] + (j == s[i] - &#39;0&#39;);        &#125;        cal(i);    &#125;    cout &lt;&lt; ans;    return 0;&#125;</code></pre><p><a href="https://atcoder.jp/contests/abc295/tasks/abc295_e">ABC295_E</a><br>题意：给定 $n, m, k$,<br>和一个长度为 $n$ 的数组，为$A_1,A_2…A_n$ ,<br>其中$1&lt;=k&lt;=n&lt;=2000, 1&lt;=m&lt;=2000, 0&lt;=A_i&lt;=m$<br>我们可以选择其中为0的位置，其值随机为 $1到m$ 的一个值，然后求对该数组排序后$A_k$的期望值</p><p>思路：据我们所知期望值$E(x)=∑i*p_{x=i} =∑ p_{x&gt;=i} $，那么对于本题，对于每个$i∈(1,m)$,我们求排序后k位置上的$A_k &gt;= i$的概率对答案的贡献</p><p>其中，我们统计原数组中比i大的数字个数tar和等于0的个数ze，我们若要第k位大于等于i，则还需要$n-k+1-tar$ 个大于等于i的数，如果我们定义此时的$tar=n-k+1-tar$，则当tar小于0时，无论怎么操作都能满足要求，此时对答案的贡献为1.<br>假设我们需要的$tar-ze&gt;0$时，说明没有足够的0来满足题目要求，所以此时对答案的贡献都是0<br>倘若以上情况都不是，我们的贡献为$C_{ze}^jp^j(1-p)^{ze-j}$,其中p为选中的都是大于i的情况，即$p=(m-i+1)/m$<br>因为这题的数值都很小，可以用地推求组合数的方法写</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i, n, m) for(int i = n; i &lt;= m; ++i)#define int long longusing namespace std;const int N = 2e3 + 10, MOD = 998244353;int a[N], C[N][N];int qmi(int a, int b)&#123;    int ans = 1;    while(b)&#123;        if(b &amp; 1) ans = ans * a % MOD;        a = a * a % MOD;        b &gt;&gt;= 1;    &#125;    return ans % MOD;&#125;signed main()&#123;    //求组合数    rep(i, 0, N - 1)&#123;        rep(j, 0, i)&#123;            if(j == 0) C[i][j] = 1;            else C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % MOD;        &#125;    &#125;    int n, m, k; cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;    rep(i, 1, n) cin &gt;&gt; a[i];    int ans = 0;    rep(i, 1, m)&#123;        int tar = n - k + 1, ze = 0;        rep(j, 1, n)&#123;            if(a[j] &gt;= i) tar --;            else if(a[j] == 0) ze ++ ;        &#125;        if(tar &lt; 0 || tar - ze &gt; 0)&#123;            // 如果满条件            if(tar &lt; 0) ans ++;            continue;        &#125;        int p = (m - i + 1) * qmi(m, MOD - 2) % MOD;        // pp = 1 - p        int pp = ((1 - p) % MOD + MOD) % MOD;        //此时必须需要选择的 0 的个数为 tar ~ ze        rep(j, tar, ze)&#123;            int x = qmi(p, j), y = qmi(pp, ze - j);            int num = C[ze][j] % MOD * x % MOD * y % MOD;            ans = (ans + num) % MOD;        &#125;    &#125;    cout &lt;&lt; ans;&#125;</code></pre><p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=2586">How far away</a><br>一道LCA题，算板子吧</p><p>题意：给定T组数据，每组数据有一棵树，给定$n,m$，分别为点数和边数，然后$n-1$行输入两个点及其边长，然后m组询问，每次查询两个结点的最近公共祖先</p><p>思路：我们利用倍增的思想，用 $f[i][j]$ 记录$i$结点往上$(1 &lt;&lt; j)$ 的祖先，用 $dist[i] $记录$i$到根节点的深度,同时用一个$cost[i][j]$同样用倍增的思路记录路径长度<br>其中我们用</p><pre><code>       for(int i  = 1; i &lt;= n; ++ i)&#123;        lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i);    &#125;</code></pre><p>来地推$lg[i]$</p><pre><code class="cpp">#include &lt;iostream&gt;#define rep(i, n, m) for(int i = n; i &lt;= m; ++i)#define per(i, n, m) for(int i = n; i &gt;= m; --i)using namespace std;const int N = 8e5 + 10;int w[N], h[N], ne[N], e[N], cnt, lg[N], dist[N], f[N][30], cost[N][30];void add(int a, int b, int c)&#123;     e[cnt] = b, w[cnt] = c, ne[cnt] = h[a], h[a] = cnt++;&#125;void dfs(int u, int fa)&#123;    dist[u] = dist[fa] + 1; //u的深度+1    f[u][0] = fa; //u的上一个祖先时fa    for(int i = 1; i &lt;= lg[dist[u]]; ++ i)&#123;        //倍增更新祖先和路径长度        f[u][i] = f[f[u][i - 1]][i - 1];        cost[u][i] = cost[f[u][i - 1]][i - 1] + cost[u][i - 1];    &#125;    for(int i = h[u]; ~i; i = ne[i])&#123;        int j = e[i];        if(j != fa)&#123;            //更新上一层路径            cost[j][0] = w[i];            dfs(j, u);        &#125;    &#125;&#125;int LCA(int a, int b)&#123;    int ans = 0;    //我们默认使得a的深度大于等于b的深度    if(dist[a] &lt; dist[b]) swap(a, b);    //我们将a上升到与b同一深度的位置，同时给ans增加贡献    while(dist[a] &gt; dist[b])         ans += cost[a][lg[dist[a] - dist[b]] - 1],        a = f[a][lg[dist[a] - dist[b]] - 1];    if(a == b) return ans;    //二者仍然不相等，将a和b同时上升到公共祖先的儿子    for(int i = lg[dist[a]] - 1; i &gt;= 0; --i)&#123;        if(f[a][i] != f[b][i])&#123;            ans += cost[a][i];            ans += cost[b][i];            a = f[a][i], b = f[b][i];        &#125;    &#125;    return ans + cost[a][0] + cost[b][0];&#125;int main()&#123;    //ios::sync_with_stdio(0); cin.tie(0);    int T; cin &gt;&gt; T;    while(T--)&#123;           memset(h, -1, sizeof h);        int n, m, s; cin &gt;&gt; n &gt;&gt; m;            for(int i  = 1; i &lt;= n; ++ i)&#123;            lg[i] = lg[i - 1] + (1 &lt;&lt; lg[i - 1] == i);        &#125;        rep(i, 1, n - 1)&#123;            int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;               add(a, b, c); add(b, a, c);        &#125;           dfs(1, 0); //我们默认以1为根节点深搜        while(m --)&#123;            int a, b; cin &gt;&gt; a &gt;&gt; b;            cout &lt;&lt; LCA(a, b) &lt;&lt; &#39;\n&#39;;        &#125;    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;算是最近做的几道题里觉得值得回顾一下的吧&lt;/p&gt;</summary>
    
    
    
    <category term="杂题" scheme="http://example.com/categories/%E6%9D%82%E9%A2%98/"/>
    
    
    <category term="组合数" scheme="http://example.com/tags/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    
    <category term="二进制" scheme="http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="LCA" scheme="http://example.com/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>字典树板子</title>
    <link href="http://example.com/posts/57640/"/>
    <id>http://example.com/posts/57640/</id>
    <published>2023-03-02T12:15:39.000Z</published>
    <updated>2023-03-02T12:38:40.440Z</updated>
    
    <content type="html"><![CDATA[<p>做道板子</p><span id="more"></span><p>洛谷题 ：<a href="https://www.luogu.com.cn/problem/P8306">字典树</a></p><p>我们考虑将一组字符串转化为树的形式</p><p><img src="/picture/trie1.jpg"></p><p>我们使得每个结点之间连接的边表示一个字符，那么对于一个结点，它可以连接有限个结点（假设字符只有a-z，那么一个结点最多连接26个亲儿子），</p><p>于是我们以图示为例子，以“cd”结尾的字符串有两个，分别为 “cdf” 和 “cdh”， 所以我们可以在初始化的时候更新trie数组，</p><p>我们用trie[p][x] 数组表示p结点连接的字符x是否存在，那么我们可以用Ascall来替代字符的数字，因为本题的字符有数字有字母，所以我们以ascall值最小的0来做基底</p><p>以cnt来表示结点编号</p><pre><code class="cpp">void in(string s)&#123;    int p = 0, n = s.size();    rep(i, 0, n - 1)&#123;        int x = s[i] - &#39;0&#39;;        if(!trie[p][x]) trie[p][x] = ++ cnt; // 如果该节点没有连接s[i]，那么新增结点编号        p = trie[p][x]; // 下传结点        ans[p] ++; //以该结点结尾的字符串个数    &#125;&#125;</code></pre><p>于是我们便可以便捷地查询有s前缀字符串的个数</p><pre><code class="cpp">int get(string s)&#123;    int p = 0, n = s.size();    rep(i, 0, n - 1)&#123;        int x = s[i] - &#39;0&#39;;        if(!trie[p][x]) return 0; //还没找完就没有了，直接 return 0        p = trie[p][x];    &#125;    return ans[p]; //&#125;</code></pre><p>注意trie数组的大小，因为 本题一次性预处理的字符串个数有 1e5， 所以在累加结点编号的时候难免会超出 很多</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i, n, m) for(int i = n; i &lt;= m; ++i)using namespace std;const int N = 3e6 + 10;int ans[N], trie[N][150], cnt;void in(string s)&#123;    int p = 0, n = s.size();    rep(i, 0, n - 1)&#123;        int x = s[i] - &#39;0&#39;;        if(!trie[p][x]) trie[p][x] = ++ cnt;        p = trie[p][x];        ans[p] ++;    &#125;&#125;int get(string s)&#123;    int p = 0, n = s.size();    rep(i, 0, n - 1)&#123;        int x = s[i] - &#39;0&#39;;        if(!trie[p][x]) return 0;        p = trie[p][x];    &#125;    return ans[p];&#125;void solve()&#123;    // 初始化    rep(i, 0, cnt)&#123;        ans[i] = 0;        rep(j, 0, 140) trie[i][j] = 0;    &#125; cnt = 0;    int n, q; cin &gt;&gt; n &gt;&gt; q;    rep(i, 1, n)&#123;        string s; cin &gt;&gt; s;        in(s);    &#125;    rep(i, 1, q)&#123;        string s; cin &gt;&gt; s;        cout &lt;&lt; get(s) &lt;&lt; &#39;\n&#39;;    &#125;&#125;int main()&#123;    //ios::sync_with_stdio(0); cin.tie(0);    int n; cin &gt;&gt; n;    while(n--) solve();    return 0;&#125;</code></pre><p>延申题下次再更新。。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做道板子&lt;/p&gt;</summary>
    
    
    
    <category term="Trie" scheme="http://example.com/categories/Trie/"/>
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>点分治</title>
    <link href="http://example.com/posts/49220/"/>
    <id>http://example.com/posts/49220/</id>
    <published>2023-02-16T04:59:45.000Z</published>
    <updated>2023-02-16T08:19:07.518Z</updated>
    
    <content type="html"><![CDATA[<p>水了一个寒假，快开学了QAQ</p><span id="more"></span><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>过度~~~</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>何为分治？</p><h2 id="分治："><a href="#分治：" class="headerlink" title="分治："></a>分治：</h2><blockquote><p>将一个大问题用类似于二分的手法将其分成一半进行递归求解。</p></blockquote><p>洛谷题 ：<a href="https://www.luogu.com.cn/problem/P1257">平面最近点对</a></p><blockquote><p>以该题为例: 求二维平面内n个点中的最短距离</p></blockquote><p>思路：<br>我们可以将该图以最中间的点的x值分为两个区域<br><img src="/picture/dfz1.png"><br>然后我们可以用分治的思想求最短距离d,其为两部分</p><blockquote><p>1 : 求每个部分中最短距离 d</p></blockquote><blockquote><p>2 : 求跨越两个区域的最短距离 d</p></blockquote><p>第一个部分我们很好理解，分治递归之。<br>第二个部分我们可以假设从已经从每个部分中得到一个最小距离d，我们假设中间点的坐标为 $x_1$，那么我们可以枚举 $x_1 - d &lt; x &lt;x_1 + d $ 的点查找是否有小于 $d$ 的值并更新。<br>因为对于以 $x_1$ 为中心，边长为 $d$ 的两个正方形， 显然枚举的点数一直在减小。</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i, n, m) for(int i = n; i &lt;= m; ++i)#define per(i, n, m) for(int i = n; i &gt;= m; --i)using namespace std;const int N = 2e5 + 10;pair&lt;double, double&gt; p[N];double cal(pair&lt;double, double&gt; a, pair&lt;double, double&gt; b)&#123;    return sqrt((a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second));&#125;double get(int l, int r)&#123;    if(l == r) return INF;    if(l + 1 == r) return cal(p[l], p[r]);    int mid = l + r &gt;&gt; 1;    double x = p[mid].first;    double d = min(get(l, mid), get(mid + 1, r));    for(int i = mid; i &gt;= l &amp;&amp; x - p[i].first &lt; d; -- i)&#123;        for(int j = mid + 1; j &lt;= r &amp;&amp; p[j].first - x &lt; d; ++ j)&#123;            double res = cal(p[i], p[j]);            d = min(res, d);        &#125;    &#125;    return d;&#125;int main()&#123;    //ios::sync_with_stdio(0); cin.tie(0);    int n; cin &gt;&gt; n;    rep(i, 1, n)&#123;        cin &gt;&gt; p[i].first;        cin &gt;&gt; p[i].second;    &#125;    sort(p + 1, p + 1 + n);    printf(&quot;%.4lf&quot;, get(1, n));    return 0;&#125;</code></pre><p>然后回到正事<br>洛谷题：<a href="https://www.luogu.com.cn/problem/P3806">点分治</a></p><blockquote><p>题意：给定一棵 n 个节点的数，m 次询问每次问是否存在距离为 k 的点对</p></blockquote><p>思路：<br>对于一颗树，我们考虑选择一个根节点 $root$，那么删除该根节点后，就会出现若干棵子树<br>然后我们考虑的距离有两种：<br><img src="/picture/dfz2.png"></p><blockquote><p>1 ：一颗子树中的两个节点之间的距离<br>2 ：两个属于不同子树的节点之间的距离，这个路径是经过根节点的。（如果有一个节点是根节点，那么可以看成第二种情况下一个节点到根节点的距离为 0）</p></blockquote><p>如果我们枚举每一个节点为根节点，那每一个递归层的复杂度是 $O(nlogn)$,如果一颗树的路径是一条线性链表的话，那复杂度就变成了$O(n^2logn)$，直接寄了，所以我们可以考虑找到一棵树的重心作为根节点，那么我们的复杂度就可以变成$O(nlog^2n)$</p><blockquote><p>（树的重心：它的子树的数量最大值最小）<br>我们可以用一个递归来找重心</p></blockquote><pre><code class="cpp">void get_root(int u, int pre, int sum)&#123;    siz[u] = 1; mx[u] = 0;    for(int i = head[u]; i; i = ne[i])&#123;        int to = e[i];        if(to == pre || vis[to]) continue; //如果当前点已经做过重心        get_root(to, u, sum);        siz[u] += siz[to]; //子树大小相加        mx[u] = max(mx[u], siz[to]); //找最大子树大小    &#125;    mx[u] = max(mx[u], sum - siz[u]); //当前子树外的所有点 sum - siz[u]    if(mx[u] &lt; mx[root] || !root) root = u; //如果最大子树大小比 mx[root]小就更新&#125;</code></pre><p>另外，在一个根节点下面的所有dist都知道了以后，如果两个点是同一颗子树中的，那他俩的dist相加肯定不是正确的路径长度，所以我们可以用一个col来标记当前节点属于哪一棵子树，最后我们二分该根节点下的所有节点，如果不属于同一颗子树且满足dist[l] + dist[r] == query[i] ，则答案存在</p><pre><code class="cpp">    sort(q + 1, q + 1 + tol, cmp); //我们对所有点按 到 根节点的距离长度排序    rep(i, 1, m)&#123;        int l = 1, r = tol;        if(ok[i]) continue;        while(l &lt; r)&#123;            int x = q[l], y = q[r];            if(dist[x] + dist[y] &lt; query[i])&#123;                 l ++;            &#125;else if(dist[x] + dist[y] &gt; query[i])&#123;                r --;            &#125;else if(col[x] == col[y])&#123;                if(col[y] == col[q[r - 1]]) r --;                else l ++;            &#125;else &#123;                ok[i] = 1;                break;            &#125;        &#125;    &#125;</code></pre><p>最终代码</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i, n, m) for(int i = n; i &lt;= m; ++i)#define per(i, n, m) for(int i = n; i &gt;= m; --i)using namespace std;const int N = 2e5 + 10;int ne[N], w[N], e[N], head[N], cnt = 0; //邻接表int n, m, root, ok[N], query[N], siz[N], mx[N], vis[N];int tol, q[N], dist[N], col[N];/*ok：是否存在点对满足解  query：每次询问的k值 siz：以当前为根节点的子树大小mx：以当前节点为根节点，其子树中大小的最小值 vis：当前节点是否当过重心tol：队列的大小， q：队列 dist：当前节点到根节点的距离 col：当前点属于哪棵子树*/void add(int a, int b, int c)&#123;    e[++cnt] = b, w[cnt] = c, ne[cnt] = head[a], head[a] = cnt; &#125;bool cmp(int a, int b)&#123;    return dist[a] &lt; dist[b];&#125;void get_root(int u, int pre, int sum)&#123;    siz[u] = 1; mx[u] = 0;    for(int i = head[u]; i; i = ne[i])&#123;        int to = e[i];        if(to == pre || vis[to]) continue;        get_root(to, u, sum);        siz[u] += siz[to];        mx[u] = max(mx[u], siz[to]);    &#125;    mx[u] = max(mx[u], sum - siz[u]);    if(mx[u] &lt; mx[root] || !root) root = u;&#125;void get_dist(int u, int pre, int dis, int camp)&#123;    q[++tol] = u;   // 入队列    dist[u] = dis;    col[u] = camp;  // u节点属于子树 camp    for(int i = head[u]; i; i = ne[i])&#123;        int to = e[i];        if(to == pre || vis[to]) continue;        get_dist(to, u, w[i] + dis, camp);    &#125;&#125;void cal(int u)&#123;    tol = 0;    q[++ tol] = u;    dist[u] = 0;    col[u] = u;    for(int i = head[u]; i ; i = ne[i])&#123;        int to = e[i];        if(!vis[to]) get_dist(to, u, w[i], to);    &#125;    sort(q + 1, q + 1 + tol, cmp);    rep(i, 1, m)&#123;        int l = 1, r = tol;        if(ok[i]) continue;        while(l &lt; r)&#123;            int x = q[l], y = q[r];            if(dist[x] + dist[y] &lt; query[i])&#123;                l ++;            &#125;else if(dist[x] + dist[y] &gt; query[i])&#123;                r --;            &#125;else if(col[x] == col[y])&#123;                if(col[y] == col[q[r - 1]]) r --;                else l ++;            &#125;else &#123;                ok[i] = 1;                break;            &#125;        &#125;    &#125;&#125;void solve(int u)&#123; // 分治    vis[u] = 1;    cal(u);    for(int i = head[u]; i; i = ne[i])&#123;        int to = e[i];        if(!vis[to])&#123;            root = 0;            get_root(to, 0, siz[to]);            solve(root);        &#125;    &#125;&#125;int main()&#123;    //ios::sync_with_stdio(0); cin.tie(0);    cin &gt;&gt; n &gt;&gt; m;    rep(i, 1, n - 1)&#123;        int u, v, w; cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;        add(u, v, w); add(v, u, w);    &#125;    rep(i, 1, m)&#123;        cin &gt;&gt; query[i];    &#125;    mx[0] = n;    get_root(1, 0, n);    solve(root);    rep(i, 1, m)&#123;        if(ok[i]) cout &lt;&lt; &quot;AYE&quot; &lt;&lt; &#39;\n&#39;;        else cout &lt;&lt; &quot;NAY&quot; &lt;&lt; &#39;\n&#39;;    &#125;    return 0;&#125;/*4 41 2 32 3 23 4 12314*/</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;水了一个寒假，快开学了QAQ&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="http://example.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="分治" scheme="http://example.com/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="递归" scheme="http://example.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>欧几里得延申</title>
    <link href="http://example.com/posts/31561/"/>
    <id>http://example.com/posts/31561/</id>
    <published>2023-01-14T07:40:54.000Z</published>
    <updated>2023-01-14T12:28:53.364Z</updated>
    
    <content type="html"><![CDATA[<p>md鼻塞真难受</p><span id="more"></span><p>欧几里得辗转相除法：求a，b的最大公约数</p><pre><code class="cpp">int gcd(int a, int b)&#123;  return a % b == 0 ? b : gcd(b, a % b);&#125;</code></pre><h2 id="几何证明："><a href="#几何证明：" class="headerlink" title="几何证明："></a>几何证明：</h2><p>  问可以用最大边长为多少的正方形填满这个 20 * 56 的长方形 ?<br><img src="/picture/gcd1.png"><br>我们首先必然可以使用20边长的去填，于是得到了余下的16*20的长方形<br><img src="/picture/gcd2.png"><br>以此类推，我们可以得到这样子的填补，显而4是最大的正方形可以填补该最大长方形，所以4就是20和56的最大公约数。<br><img src="/picture/gcd3.png"></p><h2 id="："><a href="#：" class="headerlink" title="："></a>：</h2><pre><code> 56 ÷ 20 = 2 ······ 16 20 ÷ 16 = 1 ······ 4 16 ÷  4 = 0</code></pre><p>我们设余数是 $r$，被除数是 $a$，除数是 $b$，商是 $c$，$a、b$的最大公约数是 $s$，得 $r = a - b*c$<br>又因为 $s|r, s|b$<br>$gcd(56,20) =gcd(20,16)=gcd(16,4)=4$<br>则<br>$gcd(a,b) = gcd(b, a$%$b) $</p><h2 id="裴蜀定理-（我写的是狗屎-，）"><a href="#裴蜀定理-（我写的是狗屎-，）" class="headerlink" title="裴蜀定理:  （我写的是狗屎 ，）"></a>裴蜀定理:  （我写的是狗屎 ，）</h2><p>设 $a,b$ 是不全为零的整数，则存在整数 $x,y$, 使得 $ax+by=gcd(a,b)$</p><p>我们可以简单发现，如果 $ax+by=d$, 则 d 一定为 $gcd(a,b)$ 的倍数，</p><p>由 $ax+by=$  $a_1 r  x+$ $b_1ry=d$，显得 $d$ 也是 $r$ 的倍数</p><p>同时我们可得若当 $ax+by=1$ 有解，则 $a，b$ 互质。</p><h2 id="扩展欧几里得求解"><a href="#扩展欧几里得求解" class="headerlink" title="扩展欧几里得求解"></a>扩展欧几里得求解</h2><p>给定两个整数 $a、b$,求得一组解 $x、y$ 使得 $ax+by=d$<br>当 $b=0$ 时 $ax+by=a$ 故而 $x=1,y=0$</p><p>当 $b≠0$ 时<br>$gcd(a,b)=gcd(b,a$%$b)$ 且 $bx′+(a$%$b)y′=gcd(b,a$%$b)$</p><p>$bx′+(a−⌊a/b⌋×b)y′=gcd(b,a$%$b)</p><p>$ay’+b(x’−⌊a/b⌋×y’)=gcd(b,a$%$b)=gcd(a,b)$</p><p>得 $x=y’,y=x’−⌊a/b⌋×y’$</p><p>然后我们可以采用递归求解</p><pre><code class="cpp">void ex_gcd(int a, int b, int &amp;x, int &amp;y)&#123;    if(b == 0)&#123;        x = 1, y = 0;        return ;    &#125;    ex_gcd(b, a % b, y, x);    y = y - a / b * x;&#125;void solve()&#123;    int a, b, x, y; cin &gt;&gt; a &gt;&gt; b;    ex_gcd(a, b, x, y);    cout &lt;&lt; x &lt;&lt; &#39; &#39; &lt;&lt; y &lt;&lt; &#39;\n&#39;;&#125;</code></pre><h2 id="中国剩余定理："><a href="#中国剩余定理：" class="headerlink" title="中国剩余定理："></a>中国剩余定理：</h2><p>给定 $a$ 数组和 $n$ 数组(其中 $n_1$, $n_2$,…, $n_k$两两互质)，可用该定理求解如下方程组</p><p><svg xmlns="http://www.w3.org/2000/svg" width="18.872ex" height="11.765ex" viewBox="0 -2850 8341.3 5200" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-122-TEX-S4-23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z"></path><path id="MJX-122-TEX-S4-23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z"></path><path id="MJX-122-TEX-S4-23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z"></path><path id="MJX-122-TEX-S4-23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z"></path><path id="MJX-122-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-122-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-122-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-122-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-122-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-122-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-122-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-122-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-122-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-122-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-122-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-122-TEX-N-22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path><path id="MJX-122-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-122-TEX-S4-23A7" transform="translate(0, 1951)"></use><use xlink:href="#MJX-122-TEX-S4-23A9" transform="translate(0, -1451)"></use><use xlink:href="#MJX-122-TEX-S4-23A8" transform="translate(0, 0)"></use><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><use xlink:href="#MJX-122-TEX-S4-23AA" transform="scale(1, 4.825)"></use></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><use xlink:href="#MJX-122-TEX-S4-23AA" transform="scale(1, 4.825)"></use></svg></g><g data-mml-node="mtable" transform="translate(889, 0)"><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-122-TEX-N-2261"></use></g><g data-mml-node="msub" transform="translate(1905.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-122-TEX-N-31"></use></g></g><g data-mml-node="mspace" transform="translate(2838.1, 0)"></g><g data-mml-node="mo" transform="translate(3282.1, 0)"><use xlink:href="#MJX-122-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3671.1, 0)"><use xlink:href="#MJX-122-TEX-N-6D"></use><use xlink:href="#MJX-122-TEX-N-6F" transform="translate(833, 0)"></use><use xlink:href="#MJX-122-TEX-N-64" transform="translate(1333, 0)"></use></g><g data-mml-node="mspace" transform="translate(5726.8, 0)"></g><g data-mml-node="msub" transform="translate(6059.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-122-TEX-N-31"></use></g></g><g data-mml-node="mo" transform="translate(7063.3, 0)"><use xlink:href="#MJX-122-TEX-N-29"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-122-TEX-N-2261"></use></g><g data-mml-node="msub" transform="translate(1905.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-122-TEX-N-32"></use></g></g><g data-mml-node="mspace" transform="translate(2838.1, 0)"></g><g data-mml-node="mo" transform="translate(3282.1, 0)"><use xlink:href="#MJX-122-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3671.1, 0)"><use xlink:href="#MJX-122-TEX-N-6D"></use><use xlink:href="#MJX-122-TEX-N-6F" transform="translate(833, 0)"></use><use xlink:href="#MJX-122-TEX-N-64" transform="translate(1333, 0)"></use></g><g data-mml-node="mspace" transform="translate(5726.8, 0)"></g><g data-mml-node="msub" transform="translate(6059.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-122-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(7063.3, 0)"><use xlink:href="#MJX-122-TEX-N-29"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd" transform="translate(3140.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-122-TEX-N-22EF"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-122-TEX-N-2261"></use></g><g data-mml-node="msub" transform="translate(1905.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D44E"></use></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-122-TEX-N-33"></use></g></g><g data-mml-node="mspace" transform="translate(2838.1, 0)"></g><g data-mml-node="mo" transform="translate(3282.1, 0)"><use xlink:href="#MJX-122-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3671.1, 0)"><use xlink:href="#MJX-122-TEX-N-6D"></use><use xlink:href="#MJX-122-TEX-N-6F" transform="translate(833, 0)"></use><use xlink:href="#MJX-122-TEX-N-64" transform="translate(1333, 0)"></use></g><g data-mml-node="mspace" transform="translate(5726.8, 0)"></g><g data-mml-node="msub" transform="translate(6059.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mn" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-122-TEX-N-33"></use></g></g><g data-mml-node="mo" transform="translate(7063.3, 0)"><use xlink:href="#MJX-122-TEX-N-29"></use></g></g></g></g><g data-mml-node="mo" transform="translate(8341.3, 0)"></g></g></g></g></svg></p><p>其主要有三步：</p><p>1、计算每一个$n_i$的乘积$M$，同时计算<svg xmlns="http://www.w3.org/2000/svg" width="9.042ex" height="4.984ex" viewBox="0 -1359 3996.5 2202.8" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-210-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-210-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-210-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-210-TEX-I-1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path><path id="MJX-210-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-210-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(878, -150) scale(0.707)"><use xlink:href="#MJX-210-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(1449.7, 0)"><use xlink:href="#MJX-210-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(2505.5, 0)"><g data-mml-node="mi" transform="translate(220, 676)"><use xlink:href="#MJX-210-TEX-I-1D440"></use></g><g data-mml-node="msub" transform="translate(298.5, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-210-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-210-TEX-I-1D456"></use></g></g><rect width="1251" height="60" x="120" y="220"></rect></g></g></g></svg></p><p>2、然后对于每一个 $m_i$ 求 $m_i$ $c_i$ $=1(mod$ $n_i$)，也就是$m_i$在$n_i$上的逆元，以为每个$n_i$都是互质的，所以该逆元一定存在。<br>最后</p><p>3、求得<svg xmlns="http://www.w3.org/2000/svg" width="23.619ex" height="6.757ex" viewBox="0 -1740.7 10439.6 2986.6" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-190-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-190-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-190-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-190-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-190-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-190-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-190-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-190-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-190-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-190-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-190-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-190-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-190-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-190-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-190-TEX-I-1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-190-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8, 0)"><use xlink:href="#MJX-190-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1905.6, 0)"><use xlink:href="#MJX-190-TEX-N-28"></use></g><g data-mml-node="munderover" transform="translate(2294.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-190-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-190-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-190-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-190-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(537.8, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-190-TEX-I-1D458"></use></g></g></g><g data-mml-node="msub" transform="translate(3905.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-190-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-190-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(4728.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-190-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(878, -150) scale(0.707)"><use xlink:href="#MJX-190-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(5900.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-190-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, -150) scale(0.707)"><use xlink:href="#MJX-190-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(6555.1, 0)"><use xlink:href="#MJX-190-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7221.9, 0)"><use xlink:href="#MJX-190-TEX-N-6D"></use><use xlink:href="#MJX-190-TEX-N-6F" transform="translate(833, 0)"></use><use xlink:href="#MJX-190-TEX-N-64" transform="translate(1333, 0)"></use></g><g data-mml-node="mi" transform="translate(9388.6, 0)"><use xlink:href="#MJX-190-TEX-I-1D440"></use></g></g></g></svg></p><h2 id="简单证明"><a href="#简单证明" class="headerlink" title="简单证明"></a>简单证明</h2><p>我们易知 <svg xmlns="http://www.w3.org/2000/svg" width="18.427ex" height="1.927ex" viewBox="0 -694 8144.9 851.8" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-314-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-314-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-314-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-314-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-314-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-314-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-314-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-314-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-314-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-314-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-314-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(823, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-314-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(878, -150) scale(0.707)"><use xlink:href="#MJX-314-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(1994.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-314-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, -150) scale(0.707)"><use xlink:href="#MJX-314-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(2927.6, 0)"><use xlink:href="#MJX-314-TEX-N-6D"></use><use xlink:href="#MJX-314-TEX-N-6F" transform="translate(833, 0)"></use><use xlink:href="#MJX-314-TEX-N-64" transform="translate(1333, 0)"></use></g><g data-mml-node="msub" transform="translate(5094.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-314-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-314-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(6266.1, 0)"><use xlink:href="#MJX-314-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(7321.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-314-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-314-TEX-I-1D456"></use></g></g></g></g></svg>，且 <svg xmlns="http://www.w3.org/2000/svg" width="24.923ex" height="2.363ex" viewBox="0 -750 11015.9 1044.2" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-346-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-346-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-346-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-346-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-346-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-346-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-346-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-346-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-346-TEX-I-1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path><path id="MJX-346-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-346-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-346-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-346-TEX-N-21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path><path id="MJX-346-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-346-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-346-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(823, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-346-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(878, -150) scale(0.707)"><use xlink:href="#MJX-346-TEX-I-1D456"></use></g></g><g data-mml-node="msub" transform="translate(1994.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-346-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(361, -150) scale(0.707)"><use xlink:href="#MJX-346-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(2927.6, 0)"><use xlink:href="#MJX-346-TEX-N-6D"></use><use xlink:href="#MJX-346-TEX-N-6F" transform="translate(833, 0)"></use><use xlink:href="#MJX-346-TEX-N-64" transform="translate(1333, 0)"></use></g><g data-mml-node="msub" transform="translate(5094.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-346-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-346-TEX-I-1D457"></use></g></g><g data-mml-node="mo" transform="translate(6313.5, 0)"><use xlink:href="#MJX-346-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(7369.3, 0)"><use xlink:href="#MJX-346-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(7869.3, 0)"><use xlink:href="#MJX-346-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(8258.3, 0)"><use xlink:href="#MJX-346-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(8603.3, 0)"><use xlink:href="#MJX-346-TEX-N-21"></use></g><g data-mml-node="mo" transform="translate(9159.1, 0)"><use xlink:href="#MJX-346-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(10214.9, 0)"><use xlink:href="#MJX-346-TEX-I-1D457"></use></g><g data-mml-node="mo" transform="translate(10626.9, 0)"><use xlink:href="#MJX-346-TEX-N-29"></use></g></g></g></svg></p><p>这意味着所有 $a_im_it_i$ 的和在模 $M$ 的情况下满足以上所有方程组。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;md鼻塞真难受&lt;/p&gt;</summary>
    
    
    
    <category term="数论" scheme="http://example.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
    <category term="裴蜀定理" scheme="http://example.com/tags/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    
    <category term="扩展欧几" scheme="http://example.com/tags/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0/"/>
    
  </entry>
  
  <entry>
    <title>快速幂的应用</title>
    <link href="http://example.com/posts/50923/"/>
    <id>http://example.com/posts/50923/</id>
    <published>2022-11-16T06:27:35.000Z</published>
    <updated>2022-11-16T11:43:54.059Z</updated>
    
    <content type="html"><![CDATA[<p><strong>快速幂应用的推广</strong></p><span id="more"></span><p>$a^b$</p><p>来简单复习一下快速幂<br>  对于一个要求计算 <svg xmlns="http://www.w3.org/2000/svg" width="1.996ex" height="2.067ex" viewBox="0 -903.7 882.3 913.7" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-8-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-8-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-8-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-8-TEX-I-1D44F"></use></g></g></g></g></g></svg> 的题目，<svg xmlns="http://www.w3.org/2000/svg" width="13.514ex" height="2.439ex" viewBox="0 -883.9 5973.3 1077.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-36-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-36-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-36-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-36-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-36-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-36-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-36-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><use xlink:href="#MJX-36-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(777.8, 0)"><use xlink:href="#MJX-36-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1833.6, 0)"><use xlink:href="#MJX-36-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2362.6, 0)"><use xlink:href="#MJX-36-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2807.2, 0)"><use xlink:href="#MJX-36-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(3514, 0)"><use xlink:href="#MJX-36-TEX-N-2264"></use></g><g data-mml-node="msup" transform="translate(4569.8, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-36-TEX-N-31"></use><use xlink:href="#MJX-36-TEX-N-30" transform="translate(500, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(1000, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-36-TEX-N-39"></use></g></g></g></g></g></svg> ，若用朴素算法的复杂度是O(b)</p><pre><code class="cpp">    int ans = a;    for(int i = 1; i &lt;= b; ++i)&#123;      ans = ans * a;    &#125;</code></pre><p>  但倘若我们能让b二进制分解的话，可以优化该复杂度<br>  假设当b = 8时，b的二进制表示是 1000，即可以表示为</p><pre><code class="cpp">    int ans = 1;    while(b)&#123;      a *= a;      b &gt;&gt;= 1;    &#125;    ans = ans * a;</code></pre><p>因此我们只需计算b二进制表达式下的每一个1到答案即可</p><pre><code class="cpp">int qm(int a, int b)&#123;      int ans = 1;      while(b)&#123;        if(b &amp; 1) ans *= a;        a *= a;        b &gt;&gt;= 1;      &#125;      return ans;&#125;</code></pre><p>在取模p的情况下</p><pre><code class="cpp">int qm(int a, int b, int p)&#123;      int ans = 1;      while(b)&#123;        if(b &amp; 1) ans = ans * a % p;        a = a * a % p;        b &gt;&gt;= 1;      &#125;      return ans;&#125;</code></pre><p>那么快速幂除了做简单的数的幂次，还能干些啥呢？</p><blockquote><blockquote><hr></blockquote></blockquote><p>对于一个 Fibonacci 数列，我们知道它的递推公式<br><svg xmlns="http://www.w3.org/2000/svg" width="34.779ex" height="2.262ex" viewBox="0 -750 15372.1 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-122-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-122-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-122-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-122-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-122-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-122-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-122-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-122-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-122-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-122-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-122-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-122-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-122-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-122-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-122-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1627, 0)"><use xlink:href="#MJX-122-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2182.8, 0)"><use xlink:href="#MJX-122-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3238.6, 0)"><use xlink:href="#MJX-122-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3987.6, 0)"><use xlink:href="#MJX-122-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(4265.6, 0)"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(5087.8, 0)"><use xlink:href="#MJX-122-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(6088, 0)"><use xlink:href="#MJX-122-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6588, 0)"><use xlink:href="#MJX-122-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7088.2, 0)"><use xlink:href="#MJX-122-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(8088.4, 0)"><use xlink:href="#MJX-122-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(8837.4, 0)"><use xlink:href="#MJX-122-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9115.4, 0)"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9937.7, 0)"><use xlink:href="#MJX-122-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(10937.9, 0)"><use xlink:href="#MJX-122-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(11437.9, 0)"><use xlink:href="#MJX-122-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(11715.9, 0)"><use xlink:href="#MJX-122-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(12160.6, 0)"><use xlink:href="#MJX-122-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(12549.6, 0)"><use xlink:href="#MJX-122-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(13427.3, 0)"><use xlink:href="#MJX-122-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(14483.1, 0)"><use xlink:href="#MJX-122-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(14983.1, 0)"><use xlink:href="#MJX-122-TEX-N-29"></use></g></g></g></svg></p><p>但是对于<svg xmlns="http://www.w3.org/2000/svg" width="9.492ex" height="3.718ex" viewBox="0 -750 4195.5 1643.5" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-898-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-898-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-898-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-898-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-898-TEX-N-2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path><path id="MJX-898-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-898-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-898-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path id="MJX-898-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-898-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-898-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(367.4, 0)"><use xlink:href="#MJX-898-TEX-N-6C"></use><use xlink:href="#MJX-898-TEX-N-69" transform="translate(278, 0)"></use><use xlink:href="#MJX-898-TEX-N-6D" transform="translate(556, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(0, -777.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-898-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(600, 0)"><use xlink:href="#MJX-898-TEX-N-2192"></use></g><g data-mml-node="msup" transform="translate(1600, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-898-TEX-N-31"></use><use xlink:href="#MJX-898-TEX-N-30" transform="translate(500, 0)"></use></g><g data-mml-node="TeXAtom" transform="translate(1000, 393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-898-TEX-N-39"></use></g></g></g></g></g><g data-mml-node="mi" transform="translate(2290.5, 0)"><use xlink:href="#MJX-898-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3039.5, 0)"><use xlink:href="#MJX-898-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(3317.5, 0)"><use xlink:href="#MJX-898-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(3917.5, 0)"><use xlink:href="#MJX-898-TEX-N-5D"></use></g></g></g></svg>，其O(n)的复杂度也是很大的，</p><p>我们可以发现这个其实可以用矩阵表示</p><p><svg xmlns="http://www.w3.org/2000/svg" width="36.083ex" height="5.43ex" viewBox="0 -1450 15948.9 2400" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-798-TEX-S3-28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path><path id="MJX-798-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-798-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-798-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-798-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-798-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-798-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-798-TEX-S3-29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path><path id="MJX-798-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-798-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-798-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-798-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-798-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-798-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-798-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-798-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1849.2, 0)"><use xlink:href="#MJX-798-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(2849.4, 0)"><use xlink:href="#MJX-798-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3349.4, 0)"><use xlink:href="#MJX-798-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd" transform="translate(861.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-798-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-798-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-798-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1627, 0)"><use xlink:href="#MJX-798-TEX-N-5D"></use></g></g></g></g><g data-mml-node="mo" transform="translate(4363.4, 0)"><use xlink:href="#MJX-798-TEX-S3-29"></use></g></g><g data-mml-node="mo" transform="translate(5377.2, 0)"><use xlink:href="#MJX-798-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(6433, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-798-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-798-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-798-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-798-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-798-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(2736, 0)"><use xlink:href="#MJX-798-TEX-S3-29"></use></g></g><g data-mml-node="mo" transform="translate(10127.2, 0)"><use xlink:href="#MJX-798-TEX-N-2217"></use></g><g data-mml-node="mrow" transform="translate(10849.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-798-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd" transform="translate(861.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-798-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-798-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-798-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1627, 0)"><use xlink:href="#MJX-798-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-798-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-798-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-798-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1849.2, 0)"><use xlink:href="#MJX-798-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2849.4, 0)"><use xlink:href="#MJX-798-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3349.4, 0)"><use xlink:href="#MJX-798-TEX-N-5D"></use></g></g></g></g><g data-mml-node="mo" transform="translate(4363.4, 0)"><use xlink:href="#MJX-798-TEX-S3-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="33.91ex" height="5.43ex" viewBox="0 -1450 14988.1 2400" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-818-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-818-TEX-S3-28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path><path id="MJX-818-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-818-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-818-TEX-S3-29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path><path id="MJX-818-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-818-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-818-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-818-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-818-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-818-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-818-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-818-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(1055.8, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-818-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(2736, 0)"><use xlink:href="#MJX-818-TEX-S3-29"></use></g></g><g data-mml-node="mo" transform="translate(4750, 0)"><use xlink:href="#MJX-818-TEX-N-2217"></use></g><g data-mml-node="mrow" transform="translate(5472.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-818-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-818-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(2736, 0)"><use xlink:href="#MJX-818-TEX-S3-29"></use></g></g><g data-mml-node="mo" transform="translate(9166.4, 0)"><use xlink:href="#MJX-818-TEX-N-2217"></use></g><g data-mml-node="mrow" transform="translate(9888.7, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-818-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-818-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-818-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-818-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1849.2, 0)"><use xlink:href="#MJX-818-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2849.4, 0)"><use xlink:href="#MJX-818-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3349.4, 0)"><use xlink:href="#MJX-818-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-818-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-818-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-818-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1849.2, 0)"><use xlink:href="#MJX-818-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2849.4, 0)"><use xlink:href="#MJX-818-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(3349.4, 0)"><use xlink:href="#MJX-818-TEX-N-5D"></use></g></g></g></g><g data-mml-node="mo" transform="translate(4363.4, 0)"><use xlink:href="#MJX-818-TEX-S3-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="20.868ex" height="5.519ex" viewBox="0 -1489.6 9223.5 2439.6" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-852-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-852-TEX-S3-28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path><path id="MJX-852-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-852-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-852-TEX-S3-29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path><path id="MJX-852-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-852-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-852-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-852-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-852-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-852-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-852-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1055.8, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-852-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-852-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-852-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-852-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-852-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(2736, 0)"><use xlink:href="#MJX-852-TEX-S3-29"></use></g></g><g data-mml-node="TeXAtom" transform="translate(3472, 1177.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-852-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mo" transform="translate(5224.3, 0)"><use xlink:href="#MJX-852-TEX-N-2217"></use></g><g data-mml-node="mrow" transform="translate(5946.5, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-852-TEX-S3-28"></use></g><g data-mml-node="mtable" transform="translate(736, 0)"><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-852-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-852-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-852-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-852-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-852-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-852-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-852-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-852-TEX-N-5D"></use></g></g></g></g><g data-mml-node="mo" transform="translate(2541, 0)"><use xlink:href="#MJX-852-TEX-S3-29"></use></g></g></g></g></svg></p><p>此时我们就可以用快速幂计算这个矩阵，把复杂度从O(n)降低到O(logn)</p><p>举个例题：<svg xmlns="http://www.w3.org/2000/svg" width="23.265ex" height="2.149ex" viewBox="0 -750 10283 950" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" fill="#ED1B23" stroke="#ED1B23"><g data-mml-node="mo"><text data-variant="double-struck" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">求</text><text data-variant="double-struck" transform="translate(920.8, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">斐</text><text data-variant="double-struck" transform="translate(1841.7, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">波</text><text data-variant="double-struck" transform="translate(2762.5, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">那</text><text data-variant="double-struck" transform="translate(3663.8, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">契</text><text data-variant="double-struck" transform="translate(4584.6, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">数</text><text data-variant="double-struck" transform="translate(5505.4, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">列</text><text data-variant="double-struck" transform="translate(6406.7, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">前</text></g><g data-mml-node="mi" transform="translate(7605.3, 0)"><text data-variant="double-struck" transform="matrix(1 0 0 -1 0 0)" font-size="884px">𝕟</text></g><g data-mml-node="mo" transform="translate(8480.5, 0)"><text data-variant="double-struck" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">项</text><text data-variant="double-struck" transform="translate(901.3, 0) matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif" font-weight="bold">和</text></g></g></g></g></g></g></svg></p><p>对于前 n 项斐波那契数列</p><p>我们知道<svg xmlns="http://www.w3.org/2000/svg" width="26.507ex" height="2.262ex" viewBox="0 -750 11715.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-230-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-230-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-230-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-230-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-230-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-230-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-230-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-230-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-230-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-230-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-230-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-230-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1627, 0)"><use xlink:href="#MJX-230-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2182.8, 0)"><use xlink:href="#MJX-230-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3238.6, 0)"><use xlink:href="#MJX-230-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3987.6, 0)"><use xlink:href="#MJX-230-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(4265.6, 0)"><use xlink:href="#MJX-230-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(5087.8, 0)"><use xlink:href="#MJX-230-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(6088, 0)"><use xlink:href="#MJX-230-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6588, 0)"><use xlink:href="#MJX-230-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7088.2, 0)"><use xlink:href="#MJX-230-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(8088.4, 0)"><use xlink:href="#MJX-230-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(8837.4, 0)"><use xlink:href="#MJX-230-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9115.4, 0)"><use xlink:href="#MJX-230-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9937.7, 0)"><use xlink:href="#MJX-230-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(10937.9, 0)"><use xlink:href="#MJX-230-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(11437.9, 0)"><use xlink:href="#MJX-230-TEX-N-5D"></use></g></g></g></svg>，</p><p>我们移项使得  <svg xmlns="http://www.w3.org/2000/svg" width="26.507ex" height="2.262ex" viewBox="0 -750 11715.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-278-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-278-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-278-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-278-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-278-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-278-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-278-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-278-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-278-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-278-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-278-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1849.2, 0)"><use xlink:href="#MJX-278-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2849.4, 0)"><use xlink:href="#MJX-278-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(3349.4, 0)"><use xlink:href="#MJX-278-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(3905.2, 0)"><use xlink:href="#MJX-278-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(4961, 0)"><use xlink:href="#MJX-278-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(5710, 0)"><use xlink:href="#MJX-278-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(5988, 0)"><use xlink:href="#MJX-278-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(6588, 0)"><use xlink:href="#MJX-278-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7088.2, 0)"><use xlink:href="#MJX-278-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(8088.4, 0)"><use xlink:href="#MJX-278-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(8837.4, 0)"><use xlink:href="#MJX-278-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9115.4, 0)"><use xlink:href="#MJX-278-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9937.7, 0)"><use xlink:href="#MJX-278-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(10937.9, 0)"><use xlink:href="#MJX-278-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(11437.9, 0)"><use xlink:href="#MJX-278-TEX-N-5D"></use></g></g></g></svg>，</p><p>也就是  <svg xmlns="http://www.w3.org/2000/svg" width="26.507ex" height="2.262ex" viewBox="0 -750 11715.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-258-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-258-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-258-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-258-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-258-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-258-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-258-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-258-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-258-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-258-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-258-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-258-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1627, 0)"><use xlink:href="#MJX-258-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2182.8, 0)"><use xlink:href="#MJX-258-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3238.6, 0)"><use xlink:href="#MJX-258-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3987.6, 0)"><use xlink:href="#MJX-258-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(4265.6, 0)"><use xlink:href="#MJX-258-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(5087.8, 0)"><use xlink:href="#MJX-258-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(6088, 0)"><use xlink:href="#MJX-258-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(6588, 0)"><use xlink:href="#MJX-258-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7088.2, 0)"><use xlink:href="#MJX-258-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(8088.4, 0)"><use xlink:href="#MJX-258-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(8837.4, 0)"><use xlink:href="#MJX-258-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9115.4, 0)"><use xlink:href="#MJX-258-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9937.7, 0)"><use xlink:href="#MJX-258-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(10937.9, 0)"><use xlink:href="#MJX-258-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(11437.9, 0)"><use xlink:href="#MJX-258-TEX-N-5D"></use></g></g></g></svg></p><p>然后我们将n项列出来，</p><p><svg xmlns="http://www.w3.org/2000/svg" width="28.518ex" height="17.081ex" viewBox="0 -4025 12604.9 7550" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-518-TEX-S4-23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z"></path><path id="MJX-518-TEX-S4-23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z"></path><path id="MJX-518-TEX-S4-23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z"></path><path id="MJX-518-TEX-S4-23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z"></path><path id="MJX-518-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-518-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-518-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-518-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-518-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-518-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-518-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-518-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-518-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-518-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-518-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-518-TEX-N-22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path><path id="MJX-518-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-518-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-518-TEX-S4-23A7" transform="translate(0, 3126)"></use><use xlink:href="#MJX-518-TEX-S4-23A9" transform="translate(0, -2626)"></use><use xlink:href="#MJX-518-TEX-S4-23A8" transform="translate(0, 0)"></use><svg width="889" height="2156" y="1060" x="0" viewBox="0 380 889 2156"><use xlink:href="#MJX-518-TEX-S4-23AA" transform="scale(1, 10.603)"></use></svg><svg width="889" height="2156" y="-2716" x="0" viewBox="0 380 889 2156"><use xlink:href="#MJX-518-TEX-S4-23AA" transform="scale(1, 10.603)"></use></svg></g><g data-mml-node="mtable" transform="translate(889, 0)"><g data-mml-node="mtr" transform="translate(0, 3275)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-518-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2082.8, 0)"><use xlink:href="#MJX-518-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3138.6, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3887.6, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(4165.6, 0)"><use xlink:href="#MJX-518-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(4665.6, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(5165.8, 0)"><use xlink:href="#MJX-518-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(6166, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(6915, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(7193, 0)"><use xlink:href="#MJX-518-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(7693, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2075)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-518-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2082.8, 0)"><use xlink:href="#MJX-518-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3138.6, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3887.6, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(4165.6, 0)"><use xlink:href="#MJX-518-TEX-N-34"></use></g><g data-mml-node="mo" transform="translate(4665.6, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(5165.8, 0)"><use xlink:href="#MJX-518-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(6166, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(6915, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(7193, 0)"><use xlink:href="#MJX-518-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(7693, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 875)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-518-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2082.8, 0)"><use xlink:href="#MJX-518-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3138.6, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3887.6, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(4165.6, 0)"><use xlink:href="#MJX-518-TEX-N-35"></use></g><g data-mml-node="mo" transform="translate(4665.6, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(5165.8, 0)"><use xlink:href="#MJX-518-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(6166, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(6915, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(7193, 0)"><use xlink:href="#MJX-518-TEX-N-34"></use></g><g data-mml-node="mo" transform="translate(7693, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -325)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-518-TEX-N-34"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2082.8, 0)"><use xlink:href="#MJX-518-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3138.6, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3887.6, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(4165.6, 0)"><use xlink:href="#MJX-518-TEX-N-36"></use></g><g data-mml-node="mo" transform="translate(4665.6, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(5165.8, 0)"><use xlink:href="#MJX-518-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(6166, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(6915, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(7193, 0)"><use xlink:href="#MJX-518-TEX-N-35"></use></g><g data-mml-node="mo" transform="translate(7693, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2075)"><g data-mml-node="mtd"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-518-TEX-N-22EE"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0, -3275)"><g data-mml-node="mtd"><g data-mml-node="mi"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-518-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1627, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2182.8, 0)"><use xlink:href="#MJX-518-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3238.6, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3987.6, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(4265.6, 0)"><use xlink:href="#MJX-518-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(5087.8, 0)"><use xlink:href="#MJX-518-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(6088, 0)"><use xlink:href="#MJX-518-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(6588, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(7088.2, 0)"><use xlink:href="#MJX-518-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(8088.4, 0)"><use xlink:href="#MJX-518-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(8837.4, 0)"><use xlink:href="#MJX-518-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(9115.4, 0)"><use xlink:href="#MJX-518-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(9937.7, 0)"><use xlink:href="#MJX-518-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(10937.9, 0)"><use xlink:href="#MJX-518-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(11437.9, 0)"><use xlink:href="#MJX-518-TEX-N-5D"></use></g></g></g></g><g data-mml-node="mo" transform="translate(12604.9, 0)"></g></g></g></g></svg></p><p>我们将所有式子累加</p><p><svg xmlns="http://www.w3.org/2000/svg" width="67.931ex" height="2.262ex" viewBox="0 -750 30025.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-684-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-684-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-684-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-684-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-684-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-684-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-684-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-684-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-684-TEX-N-22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path><path id="MJX-684-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-684-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-684-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(1027, 0)"><use xlink:href="#MJX-684-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(2027.2, 0)"><use xlink:href="#MJX-684-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(3027.4, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(3776.4, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(4054.4, 0)"><use xlink:href="#MJX-684-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(4554.4, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(5054.7, 0)"><use xlink:href="#MJX-684-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(6054.9, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(6803.9, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(7081.9, 0)"><use xlink:href="#MJX-684-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(7581.9, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(8082.1, 0)"><use xlink:href="#MJX-684-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(9082.3, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(9831.3, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(10109.3, 0)"><use xlink:href="#MJX-684-TEX-N-34"></use></g><g data-mml-node="mo" transform="translate(10609.3, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(11054, 0)"><use xlink:href="#MJX-684-TEX-N-22EF"></use></g><g data-mml-node="mo" transform="translate(12448.2, 0)"><use xlink:href="#MJX-684-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(13448.4, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(14197.4, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(14475.4, 0)"><use xlink:href="#MJX-684-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(15075.4, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mspace" transform="translate(15353.4, 0)"></g><g data-mml-node="mo" transform="translate(15631.2, 0)"><use xlink:href="#MJX-684-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(16687, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(17436, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(17714, 0)"><use xlink:href="#MJX-684-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(18536.2, 0)"><use xlink:href="#MJX-684-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(19536.4, 0)"><use xlink:href="#MJX-684-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(20036.4, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(20536.7, 0)"><use xlink:href="#MJX-684-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(21536.9, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(22285.9, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(22563.9, 0)"><use xlink:href="#MJX-684-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(23063.9, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mspace" transform="translate(23341.9, 0)"></g><g data-mml-node="mo" transform="translate(23619.7, 0)"><use xlink:href="#MJX-684-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(24675.4, 0)"><use xlink:href="#MJX-684-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(25424.4, 0)"><use xlink:href="#MJX-684-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(25702.4, 0)"><use xlink:href="#MJX-684-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(26524.7, 0)"><use xlink:href="#MJX-684-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(27524.9, 0)"><use xlink:href="#MJX-684-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(28024.9, 0)"><use xlink:href="#MJX-684-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(28525.1, 0)"><use xlink:href="#MJX-684-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(29525.3, 0)"><use xlink:href="#MJX-684-TEX-N-31"></use></g></g></g></svg><br>所以我们可以用快速幂计算出<svg xmlns="http://www.w3.org/2000/svg" width="8.207ex" height="2.262ex" viewBox="0 -750 3627.4 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-868-TEX-I-1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path><path id="MJX-868-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-868-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-868-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-868-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-868-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-868-TEX-I-1D439"></use></g><g data-mml-node="mo" transform="translate(749, 0)"><use xlink:href="#MJX-868-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(1027, 0)"><use xlink:href="#MJX-868-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1849.2, 0)"><use xlink:href="#MJX-868-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(2849.4, 0)"><use xlink:href="#MJX-868-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(3349.4, 0)"><use xlink:href="#MJX-868-TEX-N-5D"></use></g></g></g></svg></p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define int long longusing namespace std;int ans[2] = &#123;1, 0&#125;;int A[2][2] = &#123;    &#123;1, 1&#125;,    &#123;1, 0&#125;&#125;;int n, p;void mul(int a[], int b[][2])&#123;    int c[2] = &#123;0&#125;;    c[0] = a[0] * b[0][0] + a[1] * b[0][1];    c[1] = a[0] * b[1][0] + a[1] * b[1][1];    a[0] = c[0] % p;    a[1] = c[1] % p;&#125;void cal(int a[][2], int b[][2])&#123;    int c[2][2] = &#123;0&#125;;    rep(i, 0, 1)&#123;        rep(j, 0, 1)&#123;            rep(k, 0, 1)&#123;                c[i][j] += a[i][k] * b[k][j] % p;            &#125;        &#125;    &#125;    rep(i, 0, 1)&#123;        rep(j, 0, 1)&#123;            a[i][j] = c[i][j] % p;        &#125;    &#125;&#125;signed main()&#123;    cin &gt;&gt; n &gt;&gt; p;    n += 2;    if(p == 1)&#123;        cout &lt;&lt; 0;        return 0;    &#125;    while(n)&#123;        if(n &amp; 1) mul(ans, A);        cal(A, A);        n &gt;&gt;= 1;    &#125;    printf(&quot;%lld&quot;, ans[1] - 1);    return 0;&#125;</code></pre><blockquote><blockquote><hr></blockquote></blockquote><p>快速幂最常用的是还可以用来求逆元，由费马小定理得：</p><p>当b, m满足互质时，且 a 可以整除 b，<br>使得 <svg xmlns="http://www.w3.org/2000/svg" width="19.038ex" height="4.104ex" viewBox="0 -1117 8415 1814" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1246-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1246-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1246-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1246-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-1246-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1246-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1246-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1246-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1246-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1246-TEX-N-A0" d=""></path><path id="MJX-1246-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220, 676)"><use xlink:href="#MJX-1246-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(270, -686)"><use xlink:href="#MJX-1246-TEX-I-1D44F"></use></g><rect width="729" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1246.8, 0)"><use xlink:href="#MJX-1246-TEX-N-2261"></use></g><g data-mml-node="mi" transform="translate(2302.6, 0)"><use xlink:href="#MJX-1246-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(3053.8, 0)"><use xlink:href="#MJX-1246-TEX-N-D7"></use></g><g data-mml-node="mi" transform="translate(4054, 0)"><use xlink:href="#MJX-1246-TEX-I-1D465"></use></g><g data-mml-node="mrow" transform="translate(4626, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1246-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1246-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1267, 0)"><use xlink:href="#MJX-1246-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1752, 0)"><use xlink:href="#MJX-1246-TEX-I-1D451"></use></g><g data-mml-node="mtext" transform="translate(2272, 0)"><use xlink:href="#MJX-1246-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(2522, 0)"><use xlink:href="#MJX-1246-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3400, 0)"><use xlink:href="#MJX-1246-TEX-N-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="19.345ex" height="4.613ex" viewBox="0 -1342 8550.3 2039" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1290-TEX-N-27F9" d="M1218 514Q1218 525 1234 525Q1239 525 1242 525T1247 525T1251 524T1253 523T1255 520T1257 517T1260 512Q1297 438 1358 381T1469 300T1565 263Q1582 258 1582 250T1573 239T1536 228T1478 204Q1334 134 1260 -12Q1256 -21 1253 -22T1238 -24Q1218 -24 1218 -17Q1218 -13 1223 0Q1258 69 1309 123L1319 133H70Q56 140 56 153Q56 168 72 173H1363L1373 181Q1412 211 1490 250Q1489 251 1472 259T1427 283T1373 319L1363 327H710L707 328L390 327H72Q56 332 56 347Q56 360 70 367H1319L1309 377Q1276 412 1247 458T1218 514Z"></path><path id="MJX-1290-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1290-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1290-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1290-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-1290-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1290-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1290-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1290-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1290-TEX-N-A0" d=""></path><path id="MJX-1290-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1290-TEX-N-27F9"></use></g><g data-mml-node="mfrac" transform="translate(1915.8, 0)"><g data-mml-node="mn" transform="translate(220, 676)"><use xlink:href="#MJX-1290-TEX-N-31"></use></g><g data-mml-node="mi" transform="translate(255.5, -686)"><use xlink:href="#MJX-1290-TEX-I-1D44F"></use></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3133.6, 0)"><use xlink:href="#MJX-1290-TEX-N-2261"></use></g><g data-mml-node="mi" transform="translate(4189.3, 0)"><use xlink:href="#MJX-1290-TEX-I-1D465"></use></g><g data-mml-node="mrow" transform="translate(4761.3, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1290-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1290-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1267, 0)"><use xlink:href="#MJX-1290-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1752, 0)"><use xlink:href="#MJX-1290-TEX-I-1D451"></use></g><g data-mml-node="mtext" transform="translate(2272, 0)"><use xlink:href="#MJX-1290-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(2522, 0)"><use xlink:href="#MJX-1290-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3400, 0)"><use xlink:href="#MJX-1290-TEX-N-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="23.291ex" height="2.565ex" viewBox="0 -883.9 10294.5 1133.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1340-TEX-N-27F9" d="M1218 514Q1218 525 1234 525Q1239 525 1242 525T1247 525T1251 524T1253 523T1255 520T1257 517T1260 512Q1297 438 1358 381T1469 300T1565 263Q1582 258 1582 250T1573 239T1536 228T1478 204Q1334 134 1260 -12Q1256 -21 1253 -22T1238 -24Q1218 -24 1218 -17Q1218 -13 1223 0Q1258 69 1309 123L1319 133H70Q56 140 56 153Q56 168 72 173H1363L1373 181Q1412 211 1490 250Q1489 251 1472 259T1427 283T1373 319L1363 327H710L707 328L390 327H72Q56 332 56 347Q56 360 70 367H1319L1309 377Q1276 412 1247 458T1218 514Z"></path><path id="MJX-1340-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1340-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1340-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1340-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-1340-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1340-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1340-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1340-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1340-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1340-TEX-N-A0" d=""></path><path id="MJX-1340-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1340-TEX-N-27F9"></use></g><g data-mml-node="mn" transform="translate(1915.8, 0)"><use xlink:href="#MJX-1340-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2693.6, 0)"><use xlink:href="#MJX-1340-TEX-N-2261"></use></g><g data-mml-node="mi" transform="translate(3749.3, 0)"><use xlink:href="#MJX-1340-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(4400.6, 0)"><use xlink:href="#MJX-1340-TEX-N-2217"></use></g><g data-mml-node="msup" transform="translate(5122.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1340-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-1340-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-1340-TEX-N-31"></use></g></g></g><g data-mml-node="mrow" transform="translate(6505.5, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1340-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1340-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1267, 0)"><use xlink:href="#MJX-1340-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1752, 0)"><use xlink:href="#MJX-1340-TEX-I-1D451"></use></g><g data-mml-node="mtext" transform="translate(2272, 0)"><use xlink:href="#MJX-1340-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(2522, 0)"><use xlink:href="#MJX-1340-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3400, 0)"><use xlink:href="#MJX-1340-TEX-N-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="22.833ex" height="2.7ex" viewBox="0 -943.3 10092 1193.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1356-TEX-N-27F9" d="M1218 514Q1218 525 1234 525Q1239 525 1242 525T1247 525T1251 524T1253 523T1255 520T1257 517T1260 512Q1297 438 1358 381T1469 300T1565 263Q1582 258 1582 250T1573 239T1536 228T1478 204Q1334 134 1260 -12Q1256 -21 1253 -22T1238 -24Q1218 -24 1218 -17Q1218 -13 1223 0Q1258 69 1309 123L1319 133H70Q56 140 56 153Q56 168 72 173H1363L1373 181Q1412 211 1490 250Q1489 251 1472 259T1427 283T1373 319L1363 327H710L707 328L390 327H72Q56 332 56 347Q56 360 70 367H1319L1309 377Q1276 412 1247 458T1218 514Z"></path><path id="MJX-1356-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1356-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1356-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1356-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1356-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1356-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1356-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1356-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1356-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1356-TEX-N-A0" d=""></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1356-TEX-N-27F9"></use></g><g data-mml-node="mn" transform="translate(1915.8, 0)"><use xlink:href="#MJX-1356-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2693.6, 0)"><use xlink:href="#MJX-1356-TEX-N-2261"></use></g><g data-mml-node="msup" transform="translate(3749.3, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1356-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-1356-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1356-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(1267, 0)"><use xlink:href="#MJX-1356-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2045, 0)"><use xlink:href="#MJX-1356-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2545, 0)"><use xlink:href="#MJX-1356-TEX-N-29"></use></g></g></g><g data-mml-node="mrow" transform="translate(6303, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1356-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1356-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1267, 0)"><use xlink:href="#MJX-1356-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1752, 0)"><use xlink:href="#MJX-1356-TEX-I-1D451"></use></g><g data-mml-node="mtext" transform="translate(2272, 0)"><use xlink:href="#MJX-1356-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(2522, 0)"><use xlink:href="#MJX-1356-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3400, 0)"><use xlink:href="#MJX-1356-TEX-N-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="27.937ex" height="2.7ex" viewBox="0 -943.3 12348.1 1193.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1382-TEX-N-27F9" d="M1218 514Q1218 525 1234 525Q1239 525 1242 525T1247 525T1251 524T1253 523T1255 520T1257 517T1260 512Q1297 438 1358 381T1469 300T1565 263Q1582 258 1582 250T1573 239T1536 228T1478 204Q1334 134 1260 -12Q1256 -21 1253 -22T1238 -24Q1218 -24 1218 -17Q1218 -13 1223 0Q1258 69 1309 123L1319 133H70Q56 140 56 153Q56 168 72 173H1363L1373 181Q1412 211 1490 250Q1489 251 1472 259T1427 283T1373 319L1363 327H710L707 328L390 327H72Q56 332 56 347Q56 360 70 367H1319L1309 377Q1276 412 1247 458T1218 514Z"></path><path id="MJX-1382-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1382-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-1382-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1382-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1382-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1382-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1382-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1382-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1382-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1382-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1382-TEX-N-A0" d=""></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1382-TEX-N-27F9"></use></g><g data-mml-node="mi" transform="translate(1915.8, 0)"><use xlink:href="#MJX-1382-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2567, 0)"><use xlink:href="#MJX-1382-TEX-N-2217"></use></g><g data-mml-node="msup" transform="translate(3289.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1382-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-1382-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-1382-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(4949.7, 0)"><use xlink:href="#MJX-1382-TEX-N-2261"></use></g><g data-mml-node="msup" transform="translate(6005.5, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1382-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-1382-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1382-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(1267, 0)"><use xlink:href="#MJX-1382-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2045, 0)"><use xlink:href="#MJX-1382-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2545, 0)"><use xlink:href="#MJX-1382-TEX-N-29"></use></g></g></g><g data-mml-node="mrow" transform="translate(8559.1, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1382-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1382-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1267, 0)"><use xlink:href="#MJX-1382-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1752, 0)"><use xlink:href="#MJX-1382-TEX-I-1D451"></use></g><g data-mml-node="mtext" transform="translate(2272, 0)"><use xlink:href="#MJX-1382-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(2522, 0)"><use xlink:href="#MJX-1382-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3400, 0)"><use xlink:href="#MJX-1382-TEX-N-29"></use></g></g></g></g></svg></p><p><svg xmlns="http://www.w3.org/2000/svg" width="24.83ex" height="2.7ex" viewBox="0 -943.3 10974.7 1193.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1388-TEX-N-27F9" d="M1218 514Q1218 525 1234 525Q1239 525 1242 525T1247 525T1251 524T1253 523T1255 520T1257 517T1260 512Q1297 438 1358 381T1469 300T1565 263Q1582 258 1582 250T1573 239T1536 228T1478 204Q1334 134 1260 -12Q1256 -21 1253 -22T1238 -24Q1218 -24 1218 -17Q1218 -13 1223 0Q1258 69 1309 123L1319 133H70Q56 140 56 153Q56 168 72 173H1363L1373 181Q1412 211 1490 250Q1489 251 1472 259T1427 283T1373 319L1363 327H710L707 328L390 327H72Q56 332 56 347Q56 360 70 367H1319L1309 377Q1276 412 1247 458T1218 514Z"></path><path id="MJX-1388-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1388-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1388-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1388-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1388-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1388-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1388-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1388-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1388-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1388-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1388-TEX-N-A0" d=""></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1388-TEX-N-27F9"></use></g><g data-mml-node="msup" transform="translate(1915.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1388-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-1388-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-1388-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(3576.2, 0)"><use xlink:href="#MJX-1388-TEX-N-2261"></use></g><g data-mml-node="msup" transform="translate(4632, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-1388-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(429, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-1388-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1388-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(1267, 0)"><use xlink:href="#MJX-1388-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2045, 0)"><use xlink:href="#MJX-1388-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(2545, 0)"><use xlink:href="#MJX-1388-TEX-N-29"></use></g></g></g><g data-mml-node="mrow" transform="translate(7185.7, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-1388-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-1388-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1267, 0)"><use xlink:href="#MJX-1388-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1752, 0)"><use xlink:href="#MJX-1388-TEX-I-1D451"></use></g><g data-mml-node="mtext" transform="translate(2272, 0)"><use xlink:href="#MJX-1388-TEX-N-A0"></use></g><g data-mml-node="mi" transform="translate(2522, 0)"><use xlink:href="#MJX-1388-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3400, 0)"><use xlink:href="#MJX-1388-TEX-N-29"></use></g></g></g></g></svg></p><p>得证：<br>对 <code>a % p != 0</code> 时</p><p>a % p 的逆元为 <svg xmlns="http://www.w3.org/2000/svg" width="4.159ex" height="2.022ex" viewBox="0 -883.9 1838.4 893.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-1402-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1402-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-1402-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1402-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-1402-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(529, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-1402-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(503, 0)"><use xlink:href="#MJX-1402-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1281, 0)"><use xlink:href="#MJX-1402-TEX-N-32"></use></g></g></g></g></g></svg><br>即可以用快速幂 <svg xmlns="http://www.w3.org/2000/svg" width="14.169ex" height="2.262ex" viewBox="0 -750 6262.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-34-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-34-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-34-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-34-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-34-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-34-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-34-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-34-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-34-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-34-TEX-I-1D45E"></use></g><g data-mml-node="mi" transform="translate(460, 0)"><use xlink:href="#MJX-34-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(1338, 0)"><use xlink:href="#MJX-34-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1727, 0)"><use xlink:href="#MJX-34-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2256, 0)"><use xlink:href="#MJX-34-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2700.7, 0)"><use xlink:href="#MJX-34-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(3425.9, 0)"><use xlink:href="#MJX-34-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(4426.1, 0)"><use xlink:href="#MJX-34-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(4926.1, 0)"><use xlink:href="#MJX-34-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(5370.8, 0)"><use xlink:href="#MJX-34-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(5873.8, 0)"><use xlink:href="#MJX-34-TEX-N-29"></use></g></g></g></svg> 求得。</p><blockquote><blockquote><hr></blockquote></blockquote><p>在b站up主视频结尾看到这样的一个思考题<br><img src="/picture/qmjz.png"><br>可以先自己思考一下<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→<br>→</p><p>我们不妨把每种元素看成一个数，然后转换成一个列矩阵</p><p><svg xmlns="http://www.w3.org/2000/svg" width="5.09ex" height="18.1ex" viewBox="0 -4250 2250 8000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-18-TEX-S4-239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z"></path><path id="MJX-18-TEX-S4-239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z"></path><path id="MJX-18-TEX-S4-239C" d="M413 -9Q412 -9 407 -9T388 -10T354 -10Q300 -10 297 -9Q294 -8 293 -5Q291 5 291 127V300Q291 602 292 605L296 609Q298 610 366 610Q382 610 392 610T407 610T412 609Q416 609 416 592T417 473V127Q417 -9 413 -9Z"></path><path id="MJX-18-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-18-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-18-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-18-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-18-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-18-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-18-TEX-S4-239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z"></path><path id="MJX-18-TEX-S4-23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z"></path><path id="MJX-18-TEX-S4-239F" d="M579 -9Q578 -9 573 -9T554 -10T520 -10Q466 -10 463 -9Q460 -8 459 -5Q457 5 457 127V300Q457 602 458 605L462 609Q464 610 532 610Q548 610 558 610T573 610T578 609Q582 609 582 592T583 473V127Q583 -9 579 -9Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-18-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-18-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-18-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-18-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-18-TEX-N-32"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-18-TEX-N-33"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-18-TEX-N-34"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-18-TEX-N-35"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-18-TEX-N-36"></use></g></g></g></g><g data-mml-node="mo" transform="translate(1375, 0)"><use xlink:href="#MJX-18-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-18-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-18-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g></g></g></svg></p><p>对于第一次变换，我们可以给其左乘以一个 6 * 6 的方阵</p><p><svg xmlns="http://www.w3.org/2000/svg" width="22.059ex" height="18.1ex" viewBox="0 -4250 9750 8000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-76-TEX-S4-239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z"></path><path id="MJX-76-TEX-S4-239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z"></path><path id="MJX-76-TEX-S4-239C" d="M413 -9Q412 -9 407 -9T388 -10T354 -10Q300 -10 297 -9Q294 -8 293 -5Q291 5 291 127V300Q291 602 292 605L296 609Q298 610 366 610Q382 610 392 610T407 610T412 609Q416 609 416 592T417 473V127Q417 -9 413 -9Z"></path><path id="MJX-76-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-76-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-76-TEX-S4-239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z"></path><path id="MJX-76-TEX-S4-23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z"></path><path id="MJX-76-TEX-S4-239F" d="M579 -9Q578 -9 573 -9T554 -10T520 -10Q466 -10 463 -9Q460 -8 459 -5Q457 5 457 127V300Q457 602 458 605L462 609Q464 610 532 610Q548 610 558 610T573 610T578 609Q582 609 582 592T583 473V127Q583 -9 579 -9Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-76-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-76-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-76-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-76-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(8875, 0)"><use xlink:href="#MJX-76-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-76-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-76-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g></g></g></svg></p><p>于是<br><svg xmlns="http://www.w3.org/2000/svg" width="37.394ex" height="18.1ex" viewBox="0 -4250 16528 8000" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-116-TEX-S4-239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z"></path><path id="MJX-116-TEX-S4-239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z"></path><path id="MJX-116-TEX-S4-239C" d="M413 -9Q412 -9 407 -9T388 -10T354 -10Q300 -10 297 -9Q294 -8 293 -5Q291 5 291 127V300Q291 602 292 605L296 609Q298 610 366 610Q382 610 392 610T407 610T412 609Q416 609 416 592T417 473V127Q417 -9 413 -9Z"></path><path id="MJX-116-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-116-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-116-TEX-S4-239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z"></path><path id="MJX-116-TEX-S4-23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z"></path><path id="MJX-116-TEX-S4-239F" d="M579 -9Q578 -9 573 -9T554 -10T520 -10Q466 -10 463 -9Q460 -8 459 -5Q457 5 457 127V300Q457 602 458 605L462 609Q464 610 532 610Q548 610 558 610T573 610T578 609Q582 609 582 592T583 473V127Q583 -9 579 -9Z"></path><path id="MJX-116-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-116-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-116-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-116-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-116-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-116-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-116-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-116-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-116-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-116-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(8875, 0)"><use xlink:href="#MJX-116-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-116-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-116-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g><g data-mml-node="mo" transform="translate(9972.2, 0)"><use xlink:href="#MJX-116-TEX-N-2217"></use></g><g data-mml-node="mrow" transform="translate(10694.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-116-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-116-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-116-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-32"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-33"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-34"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-35"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-36"></use></g></g></g></g><g data-mml-node="mo" transform="translate(1375, 0)"><use xlink:href="#MJX-116-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-116-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-116-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g><g data-mml-node="mo" transform="translate(13222.2, 0)"><use xlink:href="#MJX-116-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(14278, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-116-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-116-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-116-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-33"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-34"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-35"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-36"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-116-TEX-N-32"></use></g></g></g></g><g data-mml-node="mo" transform="translate(1375, 0)"><use xlink:href="#MJX-116-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-116-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-116-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g></g></g></svg></p><p>我们可以发现每一次置换就是左乘一个方阵，所以对于 n 次置换，那么答案就是</p><p><svg xmlns="http://www.w3.org/2000/svg" width="30.359ex" height="18.189ex" viewBox="0 -4289.6 13418.7 8039.6" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-126-TEX-S4-239B" d="M837 1154Q843 1148 843 1145Q843 1141 818 1106T753 1002T667 841T574 604T494 299Q417 -84 417 -609Q417 -641 416 -647T411 -654Q409 -655 366 -655Q299 -655 297 -654Q292 -652 292 -643T291 -583Q293 -400 304 -242T347 110T432 470T574 813T785 1136Q787 1139 790 1142T794 1147T796 1150T799 1152T802 1153T807 1154T813 1154H819H837Z"></path><path id="MJX-126-TEX-S4-239D" d="M843 -635Q843 -638 837 -644H820Q801 -644 800 -643Q792 -635 785 -626Q684 -503 605 -363T473 -75T385 216T330 518T302 809T291 1093Q291 1144 291 1153T296 1164Q298 1165 366 1165Q409 1165 411 1164Q415 1163 416 1157T417 1119Q417 529 517 109T833 -617Q843 -631 843 -635Z"></path><path id="MJX-126-TEX-S4-239C" d="M413 -9Q412 -9 407 -9T388 -10T354 -10Q300 -10 297 -9Q294 -8 293 -5Q291 5 291 127V300Q291 602 292 605L296 609Q298 610 366 610Q382 610 392 610T407 610T412 609Q416 609 416 592T417 473V127Q417 -9 413 -9Z"></path><path id="MJX-126-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-126-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-126-TEX-S4-239E" d="M31 1143Q31 1154 49 1154H59Q72 1154 75 1152T89 1136Q190 1013 269 873T401 585T489 294T544 -8T572 -299T583 -583Q583 -634 583 -643T577 -654Q575 -655 508 -655Q465 -655 463 -654Q459 -653 458 -647T457 -609Q457 -58 371 340T100 1037Q87 1059 61 1098T31 1143Z"></path><path id="MJX-126-TEX-S4-23A0" d="M56 -644H50Q31 -644 31 -635Q31 -632 37 -622Q69 -579 100 -527Q286 -228 371 170T457 1119Q457 1161 462 1164Q464 1165 520 1165Q575 1165 577 1164Q582 1162 582 1153T583 1093Q581 910 570 752T527 400T442 40T300 -303T89 -626Q78 -640 75 -642T61 -644H56Z"></path><path id="MJX-126-TEX-S4-239F" d="M579 -9Q578 -9 573 -9T554 -10T520 -10Q466 -10 463 -9Q460 -8 459 -5Q457 5 457 127V300Q457 602 458 605L462 609Q464 610 532 610Q548 610 558 610T573 610T578 609Q582 609 582 592T583 473V127Q583 -9 579 -9Z"></path><path id="MJX-126-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-126-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-126-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-126-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-126-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-126-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-126-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-126-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-126-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-126-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(1500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g><g data-mml-node="mtd" transform="translate(3000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(4500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(6000, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g><g data-mml-node="mtd" transform="translate(7500, 0)"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-30"></use></g></g></g></g><g data-mml-node="mo" transform="translate(8875, 0)"><use xlink:href="#MJX-126-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-126-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-126-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g><g data-mml-node="TeXAtom" transform="translate(9750, 3977.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-126-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mo" transform="translate(10446.5, 0)"><use xlink:href="#MJX-126-TEX-N-2217"></use></g><g data-mml-node="mrow" transform="translate(11168.7, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-126-TEX-S4-239B" transform="translate(0, 3096)"></use><use xlink:href="#MJX-126-TEX-S4-239D" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-126-TEX-S4-239C" transform="scale(1, 11.085)"></use></svg></g><g data-mml-node="mtable" transform="translate(875, 0)"><g data-mml-node="mtr" transform="translate(0, 3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-32"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, 700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-33"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -700)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-34"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-35"></use></g></g></g><g data-mml-node="mtr" transform="translate(0, -3500)"><g data-mml-node="mtd"><g data-mml-node="mn"><use xlink:href="#MJX-126-TEX-N-36"></use></g></g></g></g><g data-mml-node="mo" transform="translate(1375, 0)"><use xlink:href="#MJX-126-TEX-S4-239E" transform="translate(0, 3096)"></use><use xlink:href="#MJX-126-TEX-S4-23A0" transform="translate(0, -3106)"></use><svg width="875" height="4582" y="-2041" x="0" viewBox="0 1034.6 875 4582"><use xlink:href="#MJX-126-TEX-S4-239F" transform="scale(1, 11.085)"></use></svg></g></g></g></g></svg><br>可以用快速幂求得。</p><p>这是前几天拍的月全食，红色已经过去了<br><img src="/picture/moon.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;快速幂应用的推广&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数论" scheme="http://example.com/categories/%E6%95%B0%E8%AE%BA/"/>
    
    
    <category term="逆元" scheme="http://example.com/tags/%E9%80%86%E5%85%83/"/>
    
    <category term="矩阵运算" scheme="http://example.com/tags/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>KMP字符串匹配</title>
    <link href="http://example.com/posts/10532/"/>
    <id>http://example.com/posts/10532/</id>
    <published>2022-11-01T09:27:03.000Z</published>
    <updated>2022-11-02T03:11:37.585Z</updated>
    
    <content type="html"><![CDATA[<p>个人感觉，Y总讲的有点抽象，于是上b站看了几个，喵喵的和几个讲的挺好的，但是因为不是c写的代码看不懂(呜呜呜)，所以看来wls的版本就就懂了，代码还是Y总的短。</p><span id="more"></span><p>朴素查询两个长度分别为n，m的字符串的时间复杂度是O(n * m),<br>而KMP算法只需要O(n + m)，代码很简洁。</p><p>当我们需要在长度m的字符串p中，查询具有完整的长度为n的字符串s时，</p><p>下面直接开始KMP的操作<br><img src="/picture/kmp1.png"><br>我们开始会将两个字符串逐一匹配，直到无法匹配<br><img src="/picture/kmp2.png"><br>当发现两个字符无法匹配时，我们如果同时回溯i 和 j 的话就时朴素做法了，但是KMP是保证i不回溯，只回溯j，此时我们发现在两个p的前一段和s已匹配的后一段中有一部分是相同的，如下图<br><img src="/picture/kmp3.png"><br>那我们是不是只用将j回溯到1，判断此时p[j + 1] 和 s[i] 是否相等，如果相等的话可以进行下一步操作，如果不相等的话，j还应该继续往前回溯<br><img src="/picture/kmp4.png"><br>然后继续匹配，直到 j==n 时说明匹配成功<br><img src="/picture/kmp5.png"></p><p>而KMP的重点就是如何进行回溯操作呢，我们发现当寻找s已匹配后缀和p的前缀最大相同时，其实都是对相同的子字符串进行操作，所以我们可以对p字符串查找每个下标对应的前缀长度，这时候我们需要开辟最重要的ne数组。<br>从上面我们可以了解到，ne数组存的是可回溯长度，也就是前后缀相同的子字符串长度，<br>但是查询这个也需要O(n * n)暴力查询吗，当然也不需要。(最大相同长度不应该等于整个字符串长度)<br>对于 i = 1, 我们初始 ne[1] = 0 i = 2, j = 0,<br>当 p[i] != p[j + 1] 时，我们需要使 j = ne[j] ,使得 j 回溯(j &gt; 0)<br><img src="/picture/kmp6.png"><br>显而易见，当 i == 2 时，ab字符串不存在前后缀相同的子串，所以ne[2] = 0 ，<br><img src="/picture/kmp7.png"><br>当 i = 3 时，我们发现 p[i] == p[j + 1]，子串aba的最大相同长度是1，所以可以把j后移一位即 j++，然后更新 ne[3] = j = 1,<br><img src="/picture/kmp8.png"><br>同理，当 i = 4 时，j应该后移一位，ne[4] = 2,<br><img src="/picture/kmp9.png"><br>当 i = 5 时， j++，于是 ne[5] = 3,<br><img src="/picture/kmp10.png"><br>当 i = 6 时，发现 p[i] != p[j + 1] ,于是 j = ne[j] = 1,<br>然而发现 p[6] != p[1] ,所以 继续 j = ne[j] = 0 结束.<br>因为此时p[i] != p[j + 1] ,所以 j++ 不用执行，ne[6] = 0。<br>以上ne更新完毕.<br>对于ne数组的更新，O(n) 的复杂度<br>我们用代码实现</p><pre><code class="cpp">    for(int i = 2, j = 0; i &lt;= n; ++i )&#123;        while(j &amp;&amp; p[i] != p[j + 1])j = ne[j];        if(p[i] == p[j + 1])j++;        ne[i] = j;    &#125;</code></pre><p>十分简洁，而对于之后的查询相同也是以上类似的做法</p><pre><code class="cpp">    for(int i = 1, j = 0; i &lt;= m; ++i)&#123;        while(j &amp;&amp; s[i] != p[j + 1])j = ne[j];        if(p[j + 1] == s[i])j++;        if(j == n)&#123;         //当 p 字符串全部匹配，输出此时s中对应的p字符串的首字母下标        //然后回溯j               cout &lt;&lt; i - n + 1 &lt;&lt; &#39; &#39;;            j = ne[j];        &#125;    &#125;</code></pre><p><a href="https://www.luogu.com.cn/problem/P3375">KMP洛谷模板题</a></p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define all(x) x.begin(),x.end()#define pb(x) push_back(x)#define PII pair&lt;int,int&gt;#define VI vector&lt;int&gt;#define lowbit(x) x&amp;-x#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=2e5+10;string s, p;int ne[N], n, m;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    cin &gt;&gt; s &gt;&gt; p;    n = p.size();    m = s.size();    s = &#39; &#39; + s;    p = &#39; &#39; + p;    VI ans;    for(int i = 2, j = 0; i &lt;= n; ++i )&#123;        while(j &amp;&amp; p[i] != p[j + 1])j = ne[j];        if(p[i] == p[j + 1])j++;        ne[i] = j;    &#125;    for(int i = 1, j = 0; i &lt;= m; ++i)&#123;        while(j &amp;&amp; s[i] != p[j + 1])j = ne[j];        if(p[j + 1] == s[i])j++;        if(j == n)&#123;            cout &lt;&lt; i - n + 1 &lt;&lt; &#39;\n&#39;;            j = ne[j];        &#125;    &#125;    rep(i, 1, n)cout &lt;&lt; ne[i] &lt;&lt; &#39; &#39;;    return 0;&#125;</code></pre><p>呜呜呜，我要好好学习，不能摆烂<br><img src="/picture/QAQ.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;个人感觉，Y总讲的有点抽象，于是上b站看了几个，喵喵的和几个讲的挺好的，但是因为不是c写的代码看不懂(呜呜呜)，所以看来wls的版本就就懂了，代码还是Y总的短。&lt;/p&gt;</summary>
    
    
    
    <category term="KMP" scheme="http://example.com/categories/KMP/"/>
    
    
    <category term="字符串" scheme="http://example.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="匹配" scheme="http://example.com/tags/%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>codeforces水题</title>
    <link href="http://example.com/posts/1588/"/>
    <id>http://example.com/posts/1588/</id>
    <published>2022-10-14T02:49:48.000Z</published>
    <updated>2022-11-02T03:12:44.052Z</updated>
    
    <content type="html"><![CDATA[<p>水博客</p><span id="more"></span><p><strong>反省为什么练了这么久还这么拉</strong><br><strong>可能真是sb</strong><br>zhihu偷图<br><img src="https://pic1.zhimg.com/v2-0373e544ff1bdb66b979bbc8c7a144e0_b.jpg"><br><strong>round#826</strong><br>D:<br>题意：一颗二叉树的所有最小儿子上分布着1-n的不同数，问时候可以交换任意个结点的左右儿子，使得最后最小儿子从左到右递增排序，输出ans值</p><p>dfs跑一下</p><pre><code class="cpp">int a[N],ans=0;void dfs(int l,int r)&#123;    if(l&gt;=r)return ;    if(l+1==r)&#123;        if(a[l]&gt;a[r])&#123;            swap(a[l],a[r]);            ans++;        &#125;else return ;    &#125;    dfs(l,(l+r)/2);    dfs((l+r)/2+1,r);    if(a[l]&gt;a[(l+r)/2+1])&#123;        ans++;        int k=(r-l)/2+1;        rep(i,l,(l+r)/2)&#123;            swap(a[i],a[i+k]);        &#125;    &#125;&#125;void solve()&#123;    int n;cin&gt;&gt;n;    ans=0;    rep(i,1,n)cin&gt;&gt;a[i];    dfs(1,n);    // rep(i,1,n)cout&lt;&lt;a[i]&lt;&lt;&#39; &#39;;    // cout&lt;&lt;endl;    rep(i,1,n)    if(a[i]&lt;a[i-1])&#123;        cout&lt;&lt;-1&lt;&lt;endl;        return ;    &#125;    cout&lt;&lt;ans&lt;&lt;endl;&#125;</code></pre><p>F ：<br>题意：给定一个数组，问是否可以将其分为若干连续段，使得每一段的最左或最右值表示该段中其他元素的个数</p><p>左右dp一下</p><pre><code class="cpp">const int N=3e5+10;int dp[N],a[N];void solve()&#123;    int n;cin&gt;&gt;n;     rep(i,1,n)cin&gt;&gt;a[i];     memset(dp,0,sizeof dp);     dp[0]=1;     rep(i,1,n)&#123;        if(i&gt;=a[i]+1)dp[i]|=dp[i-a[i]-1];         if(a[i]+i&lt;=n)dp[a[i]+i]|=dp[i-1];    &#125;    if(dp[n])cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;    else cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;&#125;</code></pre><p><strong>round#827</strong><br>这道题卡了好久。。。<br>D:一个数组是否使得其中gcd(a[i],a[j])==1，求i+j的最大值</p><p>因为a[i]&lt;=1000，所以map存一下暴力，我他妈脑子有坑,还用暴力tle了两发</p><pre><code class="cpp">map&lt;int,int&gt;p;void solve()&#123;    int n,ans=-1;cin&gt;&gt;n;    p.clear();    rep(i,1,n)&#123;        int x;cin&gt;&gt;x;        p[x]=i;    &#125;    for(auto [x,y]:p)&#123;        for(auto [xx,yy]:p)&#123;            if(__gcd(xx,x)==1)&#123;                ans=max(ans,y+yy);            &#125;        &#125;    &#125;        cout&lt;&lt;ans&lt;&lt;endl;&#125;</code></pre><p>E：前缀和，前最大值存一下二分</p><pre><code class="cpp">ll a[N],p[N],h[N];void solve()&#123;    ll n,m;cin&gt;&gt;n&gt;&gt;m;    rep(i,1,n)&#123;        cin&gt;&gt;a[i];        p[i]=max(a[i],p[i-1]);        h[i]=h[i-1]+a[i];    &#125;    while(m--)&#123;        ll x;cin&gt;&gt;x;        ll l=1,r=n;        while(l&lt;=r)&#123;            int k=(l+r)&gt;&gt;1;            if(x&gt;=p[k])l=k+1;            else r=k-1;        &#125;        cout&lt;&lt;h[r]&lt;&lt;&#39; &#39;;    &#125;    cout&lt;&lt;endl;&#125;</code></pre><p>F:问每次操作给初始字符串都为’a’的s和t加k次字符串x，是否可以排序使得a&lt;b</p><p>记录操作后a和b的最大字符和长度</p><pre><code class="cpp">void solve() &#123;    int n,lens=1,lent=1;cin&gt;&gt;n;    char maxs=&#39;a&#39;,maxt=&#39;a&#39;;    rep(i,1,n)&#123;        int o,k;string s;cin&gt;&gt;o&gt;&gt;k&gt;&gt;s;        for(auto c:s)&#123;            if(o==1) &#123;                maxs=max(maxs,c);                lens+=k;            &#125; else &#123;                maxt=max(maxt,c);                lent+=k;            &#125;        &#125;        //如果maxt&gt;&#39;a&#39;  ,那么必然可以使得成立        //否则若a和b中都是&#39;a&#39;，那就比较长度        if(&#39;a&#39;&lt;maxt||(&#39;a&#39;==maxt&amp;&amp;&#39;a&#39;==maxs&amp;&amp;lens&lt;lent))cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;        else cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;            &#125;&#125;</code></pre><p>G:重新排列数组a，使得a的前缀异或和按最大排列</p><p>int二进制位只有三十多，所以排列前31次找出按位补1位的最大值，剩下的随便</p><pre><code class="cpp">int a[N],num;bool cmp(int a,int b)&#123;    return (a|num) &gt; (b|num);&#125;void solve()&#123;    int n;cin&gt;&gt;n;    num=0;    rep(i,1,n)cin&gt;&gt;a[i];    rep(i,1,min(31,n))&#123;    ///最多就30*nlog2n        sort(a+i,a+n+1,cmp);        num|=a[i];    &#125;    rep(i,1,n)cout&lt;&lt;a[i]&lt;&lt;&#39; &#39;;    cout&lt;&lt;endl;&#125;</code></pre><p>起床想到的第一件事就是我怎么这么废，这都没ak，二十几号还有两门结课考试，忙去了。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;水博客&lt;/p&gt;</summary>
    
    
    
    <category term="codeforces" scheme="http://example.com/categories/codeforces/"/>
    
    
    <category term="笨蛋" scheme="http://example.com/tags/%E7%AC%A8%E8%9B%8B/"/>
    
  </entry>
  
  <entry>
    <title>codeforces136C</title>
    <link href="http://example.com/posts/31251/"/>
    <id>http://example.com/posts/31251/</id>
    <published>2022-09-30T12:26:07.000Z</published>
    <updated>2022-11-02T03:13:13.896Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这波是划水叶师傅对逆元有感而发，觉得有必要好好学学，组合数开mod还是挺有必要的</strong></p><p><strong>有一说一，逆元是从沈✌那学的，逆元的证明看右边分栏里 s师傅的blog里的数论分块，我就不写了</strong></p><p><strong><svg xmlns="http://www.w3.org/2000/svg" width="3.135ex" height="2.218ex" viewBox="0 -725.5 1385.8 980.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-88-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-88-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-88-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-88-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-88-TEX-I-1D45B"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-88-TEX-I-1D45A"></use></g></g></g></g></g></svg></strong></p><span id="more"></span><p>题意：</p><p>有n张标号 1~n 的牌(保证为偶数)，Alice和Bob每人分到 n/2 张牌进行游戏。<br>游戏规则为：<br>Alice先手出一张牌，若Bob不能出比Alice的更大的牌则Bob输了，反之两张牌去除，一回合结束。下一回合由Bob先手，持续到一方没牌时平局。<br>问 Alice 赢，Bob 赢 ，二人平局的情况分别有多少种。<br>某个朋友一眼博弈论，在此我要狠狠的批评TA，我每场前都提醒TA，但是TA每场都不打！</p><p>当 n = 4 的时候，每人两张牌的话一共有 <svg xmlns="http://www.w3.org/2000/svg" width="2.751ex" height="2.559ex" viewBox="0 -883.9 1215.8 1130.9" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-50-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-50-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-50-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-50-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-50-TEX-N-32"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-50-TEX-N-34"></use></g></g></g></g></g></svg> = 6 种，其中<br>当Alice的牌为{1，4}，{2，4}，{3，4}时必胜<br>当Alice的牌为{1，3}，{1，2}时Bob必胜<br>当Alice的牌为{2，3}是平局(Alice先手出3，Bob出4，Bob出1，Alice出2，此时二者都没牌)</p><p>我们用a[i]记录Alice 在 n=i 时赢的情况，b[i] 记录 Alice输的情况(即Bob赢)<br>我们可以随便取一个值自己从后往前推一下发现，平局的情况是固定的且只有一种</p><p>我们来看当 n=6 时，<br>第一种情况，我们可以发现如果Alice选第6个牌的话，其他两个牌不论这么选都能赢(因为先手)<br>共有 <strong><svg xmlns="http://www.w3.org/2000/svg" width="2.751ex" height="2.594ex" viewBox="0 -883.9 1215.8 1146.5" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-52-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-52-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-52-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-52-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-52-TEX-N-32"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-52-TEX-N-35"></use></g></g></g></g></g></svg></strong> = 10 种情况<br><img src="https://img-blog.csdnimg.cn/79ebc50908cd4021aed7e0cb750d10fd.png"></p><p>第二种情况，如果Alice不选6，Bob选6，而Alice选5，那么在第一回合5和6都会被用掉，只剩下前四张且Bob先手出牌 ，如果在这四张牌里Bob先手且要Alice赢的话，我们需要知道4张牌时先手必败的情况，这我们就可以从 b[4] 里知道，从前 for(int i=4;i&lt;=60;i+=2) 往后计算，每一个b[i-2]都存在，所以此时的 <strong>a[6]=<svg xmlns="http://www.w3.org/2000/svg" width="2.751ex" height="2.594ex" viewBox="0 -883.9 1215.8 1146.5" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-80-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-80-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-80-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-80-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-80-TEX-N-32"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-80-TEX-N-35"></use></g></g></g></g></g></svg>+b[4]=12 , b[6]=<svg xmlns="http://www.w3.org/2000/svg" width="2.751ex" height="2.607ex" viewBox="0 -883.2 1215.8 1152.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-84-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-84-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-84-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-84-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-84-TEX-N-33"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -253.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-84-TEX-N-36"></use></g></g></g></g></g></svg>-a[6]-1</strong><br>综上所述，每一次的  <strong>a[i]=<strong><strong><svg xmlns="http://www.w3.org/2000/svg" width="6.147ex" height="3.204ex" viewBox="0 -1060.7 2717 1416" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-68-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-68-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-68-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-68-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-68-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-68-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-68-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-68-TEX-I-1D456"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(345, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-68-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(845, 0)"><use xlink:href="#MJX-68-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(1345, 0)"><use xlink:href="#MJX-68-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2123, 0)"><use xlink:href="#MJX-68-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -297.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-68-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-68-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-68-TEX-N-31"></use></g></g></g></g></g></svg></strong></strong>+b[i-2]</strong> , <strong>b[i]=</strong> <strong><svg xmlns="http://www.w3.org/2000/svg" width="4.103ex" height="3.082ex" viewBox="0 -1060.7 1813.3 1362.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-76-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-76-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-76-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-76-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-76-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-76-TEX-I-1D456"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(345, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-76-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(845, 0)"><use xlink:href="#MJX-76-TEX-N-32"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-76-TEX-I-1D456"></use></g></g></g></g></g></svg></strong> <strong>-a[i]-1</strong></p><p>接下来就是代码的解决了<br>我们发现n最大有60，组合数都爆范围了，所以题目也要求要MOD，此时就需要用逆元来求组合数，</p><p>对 1到60的逆元 我们可以用递推公式求得 <font color=red>证明请看沈师傅</font></p><pre><code>for(int i=1;i&lt;=60l++i)&#123;  inv[i]=(MOD-MOD/i)*inv[MOD%i]%MOD;&#125;</code></pre><p>此时inv数组存着每一个数的逆元</p><p>当我们算 <strong><svg xmlns="http://www.w3.org/2000/svg" width="4.103ex" height="3.082ex" viewBox="0 -1060.7 1813.3 1362.3" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-76-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-76-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-76-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-76-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-76-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-76-TEX-I-1D456"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(345, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-76-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(845, 0)"><use xlink:href="#MJX-76-TEX-N-32"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-76-TEX-I-1D456"></use></g></g></g></g></g></svg></strong> 时，简单算一下发现<br>分子要计算 i 到 (i/2+1) 分母要计算 (i/2) 到 1，分别有 i/2 个<br><img src="https://img-blog.csdnimg.cn/7848896718af445d8b052eba8a3c620f.png"><br>这时候就可以从大往小 *分母 *分子的逆元 （MOD）。</p><pre><code class="cpp">    for(int x=i,y=i/2;y&gt;0;--x,--y)&#123;        num=((num*x)%MOD*inv[y])%MOD;    &#125;</code></pre><p><svg xmlns="http://www.w3.org/2000/svg" width="6.147ex" height="3.204ex" viewBox="0 -1060.7 2717 1416" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" style=""><defs><path id="MJX-68-TEX-I-1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path><path id="MJX-68-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-68-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-68-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-68-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-68-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-68-TEX-I-1D436"></use></g><g data-mml-node="TeXAtom" transform="translate(812.2, 530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-68-TEX-I-1D456"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(345, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-68-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(845, 0)"><use xlink:href="#MJX-68-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(1345, 0)"><use xlink:href="#MJX-68-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(2123, 0)"><use xlink:href="#MJX-68-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(715, -297.3) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-68-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-68-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-68-TEX-N-31"></use></g></g></g></g></g></svg>也是同理<br>code：</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define PII pair&lt;int,int&gt;#define lowbit(x) x&amp;-x#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=2e5+10;const int MOD=998244353;ll inv[N],a[N],b[N];int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    //初始化  inv[1]=1,a[2]=1,b[2]=0;      //计算逆元    rep(i,2,60)inv[i]=(MOD-MOD/i)*inv[MOD%i]%MOD;    for(int i=4;i&lt;=60;i+=2)&#123;        //计算第一种情况时的组合数    ll sum=1;        for(int x=i-1,y=i/2-1;y&gt;0;--x,--y)&#123;            sum=((sum*x)%MOD*inv[y])%MOD;        &#125;    //计算第二种情况时的组合数        ll num=1;        for(int x=i,y=i/2;y&gt;0;--x,--y)&#123;            num=((num*x)%MOD*inv[y])%MOD;        &#125;    //因为前面MOD过了，数据可能是负数，请记得 +MOD        a[i]=(sum+b[i-2]+MOD)%MOD;        b[i]=(num-a[i]-1+MOD)%MOD;    &#125;    int m;cin&gt;&gt;m;    while(m--)&#123;        int n;cin&gt;&gt;n;        cout&lt;&lt;a[n]&lt;&lt;&quot; &quot;&lt;&lt;b[n]&lt;&lt;&#39; &#39;&lt;&lt;1&lt;&lt;endl;     &#125;    return 0;&#125;</code></pre><p>其实有时间的话，自己一个一个打表也行的（doge）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;这波是划水叶师傅对逆元有感而发，觉得有必要好好学学，组合数开mod还是挺有必要的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一说一，逆元是从沈✌那学的，逆元的证明看右边分栏里 s师傅的blog里的数论分块，我就不写了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;3.135ex&quot; height=&quot;2.218ex&quot; viewBox=&quot;0 -725.5 1385.8 980.3&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; aria-hidden=&quot;true&quot; style=&quot;&quot;&gt;&lt;defs&gt;&lt;path id=&quot;MJX-88-TEX-I-1D436&quot; d=&quot;M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;MJX-88-TEX-I-1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;path id=&quot;MJX-88-TEX-I-1D45A&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot;&gt;&lt;/path&gt;&lt;/defs&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;matrix(1 0 0 -1 0 0)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;msubsup&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;use xlink:href=&quot;#MJX-88-TEX-I-1D436&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(812.2, 413) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;use xlink:href=&quot;#MJX-88-TEX-I-1D45B&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; transform=&quot;translate(715, -247) scale(0.707)&quot; data-mjx-texclass=&quot;ORD&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;use xlink:href=&quot;#MJX-88-TEX-I-1D45A&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeforces" scheme="http://example.com/categories/codeforces/"/>
    
    
    <category term="逆元" scheme="http://example.com/tags/%E9%80%86%E5%85%83/"/>
    
    <category term="组合数" scheme="http://example.com/tags/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>codeforces135D</title>
    <link href="http://example.com/posts/18514/"/>
    <id>http://example.com/posts/18514/</id>
    <published>2022-09-09T07:39:47.000Z</published>
    <updated>2023-04-28T13:35:52.578Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这场我真的会谢，A题都看错意思了快20min才开出来</strong><br><strong>c做到一半以为不会就玩手机去了，结束后仔细做会儿改个bug就出来了</strong><br><strong>so，补个D吧</strong></p><span id="more"></span><p>题目给t(1&lt;=t&lt;=1000)个操作，每个操作输入一个源字符串(长度为偶，且len&lt;=2000)，同时Alice和Bob各有一个字符串且初始都为空，即””。<br>每次操作每个人可以从源字符串的头或尾选择一个字符剪切到自己字符串的头部。<br>当源字符串为空时，两个人的字符串按字典序比较，小的人获胜。<br>问是Alice或BOb胜还是平局。</p><p>字符区间为[l,r]时，每一轮二人都可选择一个字符,显然有以下选择</p><pre><code>Alice Bobs[l]  s[l+1]s[l]  s[r]s[r]  s[l]s[r]  s[r-1]</code></pre><p>对于一轮操作中的两个字符，要么s[i]==s[j],要么s[i]!=[j]，可知Alice先手，则先手必然选择最优结果<br>以此类推当两个字符不同时，Alice是必胜状态，此外Bob不存在胜利情况。</p><p>我们可以用一个二维dp[i][j] 表示下标 i 到 j 之间Alice是否处于必胜状态，否则就是平局</p><p>由题目数据可知我们要查询区每段区间，有（n*n）/2 的复杂度，因为数据量比较小，还是可以过的</p><pre><code class="cpp">int dp[3000][3000];int dfs(int l,int r)&#123;    //已经查询过了    if(dp[l][r]!=-1)return dp[l][r];    //仅剩最后两个字符，不相等则Alice必胜，反之平局    if(l+1==r)return s[l]!=s[r];    int flag=0;    //查询四种情况，要么选择的使得Alice必胜，要么剩下的字符串使得Alice必胜    //当Alice选择s[l]时，不论Bob选择s[l+1]ors[r]都赢    if((dfs(l+2,r)||s[l]&lt;s[l+1])&amp;&amp;(dfs(l+1,r-1)||s[l]&lt;s[r]))flag=1;    //当Alice选择s[r]时，不论Bob选择s[r-1]ors[l]都赢    if((dfs(l,r-2)||s[r]&lt;s[r-1])&amp;&amp;(dfs(l+1,r-1)||s[r]&lt;s[l]))flag=1;    return dp[l][r] = flag;&#125;void solve()&#123;    cin&gt;&gt;s;    int len=s.size();s=&#39; &#39;+s;    //初始化    rep(i,1,len)&#123;        rep(j,1,len)&#123;            dp[i][j]=-1;        &#125;    &#125;    if(dfs(1,len))cout&lt;&lt;&quot;Alice&quot;&lt;&lt;endl;    else cout&lt;&lt;&quot;Draw&quot;&lt;&lt;endl;&#125;</code></pre><p>害。</p><p><img src="/picture/headbig.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;这场我真的会谢，A题都看错意思了快20min才开出来&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;c做到一半以为不会就玩手机去了，结束后仔细做会儿改个bug就出来了&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;so，补个D吧&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeforces" scheme="http://example.com/categories/codeforces/"/>
    
    
    <category term="博弈论" scheme="http://example.com/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
    <category term="动态规划" scheme="http://example.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Nim游戏" scheme="http://example.com/tags/Nim%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>线段树入门</title>
    <link href="http://example.com/posts/40242/"/>
    <id>http://example.com/posts/40242/</id>
    <published>2022-09-07T14:41:21.000Z</published>
    <updated>2023-04-28T13:46:39.508Z</updated>
    
    <content type="html"><![CDATA[<p><strong>入坑又爱又恨的线段树</strong></p><span id="more"></span><p>线段树是将一段下标 1-n 的数组划分为一颗二叉搜索树，何为二叉搜索树呢，如下图所示<br><img src="/picture/tree1.png"><br>每一个可以继续延申的节点都有两个儿子，<br>且每一个节点下标k的两个儿子节点的下标分别是k+k和k+k+1，线段是利用这个特性，将1-n的一个区间不断分为两个又两个区间，<br><img src="/picture/tree2.png"></p><p><strong>线段树的操作主要分为三个部分</strong></p><h3 id="建树-线段树初始化"><a href="#建树-线段树初始化" class="headerlink" title="建树(线段树初始化)"></a>建树(线段树初始化)</h3><h3 id="插入-对区间进行操作"><a href="#插入-对区间进行操作" class="headerlink" title="插入(对区间进行操作)"></a>插入(对区间进行操作)</h3><h3 id="查找-获取区间的值"><a href="#查找-获取区间的值" class="headerlink" title="查找(获取区间的值)"></a>查找(获取区间的值)</h3><p>每次的插入和查找的复杂度均为O(logn)，总复杂度O(nlogn).</p><p>不难发现的是，我们可以用每一个节点表示两个儿子的和，从下网上递归得出每一个区间得和。</p><pre><code class="cpp">void build(int k, int l, int r) &#123;    if(l == r) &#123;        //num是输入的数组值        f[k] = num[l];        return;     &#125;    int m=(l+r)&gt;&gt;1;    //递归左子树    build(k+k, l, m);    //递归右子树    build(k+k+1, m + 1, r);     f[k]=f[k+k]+f[k+k+1];     //递归更新&#125;</code></pre><p>当我们给下标为4的位置+1时，可以发现他的往上的节点都会+1,改递归操作应从上往下进行，<br>开始发现4∈(1-4)，则(1-4)+1，<br>然后发现4∈(3-4)，则(3-4)+1，<br>最后4∈(4)，则(4)+1。<br><img src="/picture/tree3.png"></p><pre><code class="cpp">void in(int k, int l, int r, int x, int v) &#123;    f[k]+=v;    if(l==r) return;    int m=(l+r)&gt;&gt;1;    //递归子树    if(x&lt;=m)         //修改的区间完全在左区间        in(k+k, l, m, x, val);    else         //修改的区间完全在右区间        in(k+k+1, m + 1, r, x, val); &#125;</code></pre><h3 id="进行区间加值时"><a href="#进行区间加值时" class="headerlink" title="进行区间加值时"></a>进行区间加值时</h3><p>我们可以对这个操作进行优化，当进行区间加值时，如对3-4区间+1<br>开始发现(3-4)∈(1-4)，则(1-4)+1，<br>然后发现(3)∈(1-2)，4∈(3-4),则(1-2)+1,(3-4)+1，<br>最后3∈(3),4∈(4)，则(3)+1,(4)+1。<br>在我们对区间进行范围性加法运算的时候，需要用个数组对节点下标进行标记，表示加法运算到该节点结束</p><p><font color=red>要注意的是</font></p><p>我们使用标记是使得所有包含更改区间的节点都能更新值，且到完全覆盖修改区间的时候标记不下传<br>刚开始我想过，能不能不用 标记，直接包含的每段区间都 f[k]+=(y-x+1)*t; 就好了，结果是不行的，<br>如果不用标记，我修改了(1-4)的值+1，会在第一个节点停止，当我查询(2-3)的时候，会一直递归找到(2),(3)的值，发现并不能获取更新后的值，所以需要标记来记录更新。</p><p><img src="/picture/tree4.png"></p><pre><code class="cpp">void in(int k,int l,int r,int x,int y,ll t)&#123;  //当前节点为k，lr为节点的区间范围，xy为所要修改的区间范围，t为要加的值    if(l==x&amp;&amp;r==y)&#123;  //范围符合，v数组进行标记        v[k]+=t;            return ;    &#125;  //继续寻找    f[k]+=(y-x+1)*t;   //对属于范围内的元素进行加法运算    int m=(l+r)&gt;&gt;1;   //将区间一分为二    if(y&lt;=m)          in(k+k,l,m,x,y,t);     //查询区间右边界&lt;=当前区间左儿子右边界，     //查询区间∈当前区间左儿子    else      if(x&gt;m)       in(k+k+1,m+1,r,x,y,t);     //查询区间左边界&gt;=当前区间右儿子左边界，     //查询区间∈当前区间右儿子    else         in(k+k+1,m+1,r,m+1,y,t),in(k+k,l,m,x,m,t);       //否则递归两边区间&#125;</code></pre><p>至此我们便可以对区间进行范围性加法操作，<br>但要如何查询呢<br>当我们要查询1-3的区间和时，<br>发现(1-3)不完全∈(1-4)，却可以发现其儿子(1-2),(3-4)中，都包含了查询区间，于是把查询区间分为两块，分别对(1-2),(3-4)进行查询(1-2),(3)<br>接着我们发现(1-2)∈(1-2),则返回答案，<br>(3)不完全∈(3-4),发现其左儿子包含了3，则递归左儿子，然后查询到了(3)，便返回(3)<br><img src="/picture/tree5.png"></p><pre><code>ll cal(int k,int l,int r,int a,int b,ll ans)&#123;  //ans记录当前节点接受的值    ans += v[k];  //累计已标记的值    if(l==a&amp;&amp;r==b)&#123;        return 1LL*(f[k] + ans * (b - a + 1 ));    //刚好查询到范围，返回当前区间和+标记值*区间范围    &#125;    int m=(l+r)&gt;&gt;1;    if(b&lt;=m)return cal(k+k,l,m,a,b,ans);       //查询区间右边界&lt;=当前区间左儿子右边界，      //查询区间∈当前区间左儿子    else if(a&gt;m)return cal(k+k+1,m+1,r,a,b,ans);       //查询区间左边界&gt;=当前区间右儿子左边界，      //查询区间∈当前区间右儿子    else     return cal(k+k,l,m,a,m,ans)+cal(k+k+1,m+1,r,m+1,b,ans);         //否则递归两边区间&#125;</code></pre><p>另外对于n个数的数组，把他递归分成一颗二叉搜索树，其的数组范围就是结点的数量，应该开到4n<br>洛谷原题1<a href="https://www.luogu.com.cn/problem/P3372">线段树加法</a><br>answer code:</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define PII pair&lt;int,int&gt;#define lowbit(x) x&amp;-x#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=4e5+10;int num[N];ll f[N],v[N];void build(int k,int l,int r)&#123;    v[k]=0;    if(l==r)&#123;        f[k]=num[l];        return ;    &#125;    int m=(l+r)&gt;&gt;1;    build(k+k,l,m);    build(k+k+1,m+1,r);    f[k]=f[k+1+k]+f[k+k];&#125;void in(int k,int l,int r,int x,int y,ll t)&#123;    if(l==x&amp;&amp;r==y)&#123;        v[k]+=t;            return ;    &#125;    f[k]+=(y-x+1)*t;    int m=(l+r)&gt;&gt;1;    if(y&lt;=m)        in(k+k,l,m,x,y,t);    else      if(x&gt;m)       in(k+k+1,m+1,r,x,y,t);    else         in(k+k+1,m+1,r,m+1,y,t),in(k+k,l,m,x,m,t);&#125;ll cal(int k,int l,int r,int a,int b,ll ans)&#123;    ans += v[k];    if(l==a&amp;&amp;r==b)&#123;        return 1LL*(f[k] + ans * (b - a + 1 ));    &#125;    int m=(l+r)&gt;&gt;1;    if(b&lt;=m)return cal(k+k,l,m,a,b,ans);    else if(a&gt;m)return cal(k+k+1,m+1,r,a,b,ans);    else     return cal(k+k,l,m,a,m,ans)+cal(k+k+1,m+1,r,m+1,b,ans);&#125;int main()&#123;    int n,m;cin&gt;&gt;n&gt;&gt;m;    rep(i,1,n)cin&gt;&gt;num[i];    build(1,1,n);    while(m--)&#123;        int t;cin&gt;&gt;t;        if(t==1)&#123;            int a,b;ll c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;            in(1,1,n,a,b,c);        &#125;        else &#123;            int b,c;cin&gt;&gt;b&gt;&gt;c;            cout&lt;&lt;cal(1,1,n,b,c,0)&lt;&lt;endl;        &#125;    &#125;    return 0;&#125;</code></pre><p>🥰🥰🥰😘<br>2022-9-7   23：24<br><del>待更新区间乘法….</del></p><p>太难啦太难啦，为什莫这么烦  <font color=blue>QAQ</font><br>洛谷原题2<a href="https://www.luogu.com.cn/problem/P3373">线段树乘法</a></p><p>当我们需要对区间进行乘法操作和加法时，一个标记肯定不满足，所以需要另开一个数组标记该结点需要的乘数，并且这两种操作方法对于取模操作是不封闭的，每一次都可以取模运算。</p><p>此外我们需要用一个函数来维护区间内的标记，使得标记下传，对于题目给的加法和乘法操作，在下传标记的时候要么先加后乘，要么先乘后加，而我们采用的是先乘后加。（）</p><p>//push维护标记下传</p><pre><code>void push(int k,int l,int r)&#123;    int m=(l+r)&gt;&gt;1;    //维护节点权值    //f[儿子]=(mul[父亲]*f[儿子]+add[父亲]*(区间长度))%模    f[k+k]=(mul[k]*f[k+k]+add[k]*(m-l+1))%p;    f[k+k+1]=(mul[k]*f[k+k+1]+add[k]*(r-m))%p;        //维护乘法和加法后的值    //mul[儿子]=(mul[父亲]*mul[儿子])%模    mul[k+k]=(mul[k]*mul[k+k])%p;    mul[k+k+1]=(mul[k]*mul[k+k+1])%p;    //add[儿子]=(add[儿子]*mul[父亲]+add[父亲])%模    add[k+k]=(add[k+k]*mul[k]+add[k])%p;    add[k+k+1]=(add[k+k+1]*mul[k]+add[k])%p;        //初始化标记    mul[k]=1;    add[k]=0;    return ;&#125;</code></pre><p>为了使得标记值每次都能往下传递，所以每次操作都应该用一次push<br>来保证标记传递和标记初始化<br>区间乘法，t表示乘上的数</p><pre><code>    f[k]=(f[k]*t)%p;    mul[k]=(mul[k]*t)%p;    add[k]=(add[k]*t)%p;</code></pre><p>区间加法</p><pre><code>    add[k]=(add[k]+t)%p;    f[k]=(f[k]+t*(r-l+1))%p;</code></pre><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define PII pair&lt;int,int&gt;#define lowbit(x) x&amp;-x#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=3e5+10;ll num[N],f[N],add[N],mul[N],p;void build(int k,int l,int r)&#123;    add[k]=0;    mul[k]=1;    if(l==r)&#123;        f[k]=num[l];        f[k]%=p;        return ;    &#125;    int m=(l+r)&gt;&gt;1;    build(k+k,l,m);    build(k+k+1,m+1,r);    f[k]=(f[k+1+k]+f[k+k])%p;    //cout&lt;&lt;k&lt;&lt;&#39; &#39;&lt;&lt;f[k]&lt;&lt;endl;&#125;void push(int k,int l,int r)&#123;    int m=(l+r)&gt;&gt;1;    f[k+k]=(mul[k]*f[k+k]+add[k]*(m-l+1))%p;    f[k+k+1]=(mul[k]*f[k+k+1]+add[k]*(r-m))%p;    //维护乘法和加法后的值    mul[k+k]=(mul[k]*mul[k+k])%p;    mul[k+k+1]=(mul[k]*mul[k+k+1])%p;    add[k+k]=(add[k+k]*mul[k]+add[k])%p;    add[k+k+1]=(add[k+k+1]*mul[k]+add[k])%p;    //维护乘法加法的值    mul[k]=1;    add[k]=0;    //初始化    return ;&#125;//乘法操作void in1(int k,int l,int r,int x,int y,ll t)&#123;    if(y&lt;l||x&gt;r) return ;    if(x&lt;=l&amp;r&lt;=y)&#123;        f[k]=(f[k]*t)%p;        mul[k]=(mul[k]*t)%p;        add[k]=(add[k]*t)%p;        return ;    &#125;    push(k,l,r);    int m=(l+r)&gt;&gt;1;    in1(k+k,l,m,x,y,t);    in1(k+k+1,m+1,r,x,y,t);    f[k]=(f[k+k+1]+f[k+k])%p;    return ;&#125;//加法操作void in2(int k,int l,int r,int x,int y,ll t)&#123;    if(y&lt;l||x&gt;r) return ;    if(x&lt;=l&amp;&amp;r&lt;=y)&#123;        add[k]=(add[k]+t)%p;        f[k]=(f[k]+t*(r-l+1))%p;        return ;    &#125;    push(k,l,r);    int m=(l+r)&gt;&gt;1;    in2(k+k,l,m,x,y,t);    in2(k+k+1,m+1,r,x,y,t);    f[k]=(f[k+k+1]+f[k+k])%p;    return ;&#125;//计算区间和ll cal(int k,int l,int r,int a,int b)&#123;    if(b&lt;l||a&gt;r) return 0;    if(a&lt;=l&amp;&amp;r&lt;=b)&#123;        return f[k];    &#125;    push(k,l,r);    int m=(l+r)&gt;&gt;1;    return (cal(k+k,l,m,a,b)+cal(k+k+1,m+1,r,a,b))%p;&#125;int main()&#123;    int n,m;cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;    rep(i,1,n)cin&gt;&gt;num[i];    build(1,1,n);    while(m--)&#123;        int t;cin&gt;&gt;t;        if(t==1)&#123;            int a,b;ll c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;            in1(1,1,n,a,b,c);        &#125;else if(t==2)&#123;            int a,b;ll c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;            in2(1,1,n,a,b,c);        &#125;        else &#123;            int b,c;cin&gt;&gt;b&gt;&gt;c;            cout&lt;&lt;cal(1,1,n,b,c)&lt;&lt;endl;        &#125;    &#125;    return 0;&#125;</code></pre><p>差不多吧，总觉得还是有个点不是很透彻，慢慢悟吧<br>2022-9-8   19：54</p><p>微博摸张长图<br><img src="/picture/tree50.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;入坑又爱又恨的线段树&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="http://example.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="区间操作" scheme="http://example.com/tags/%E5%8C%BA%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    
    <category term="二叉搜索树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树状数组入门</title>
    <link href="http://example.com/posts/8158/"/>
    <id>http://example.com/posts/8158/</id>
    <published>2022-08-17T08:14:06.000Z</published>
    <updated>2023-04-28T13:59:45.319Z</updated>
    
    <content type="html"><![CDATA[<p>​<strong>树状数组处理区间问题</strong></p><span id="more"></span><p>树状数组是解决动态前缀和问题的数据结构，大佬们总是把ST表，树状数组，线段树三个东西联系在一起，都是用于解决动态区间问题的方法。</p><p>树状数组是2的次方前缀和数组，像树一样，如图所示，每个位置 i 的前缀和长度为 lowbit（i），而每层之间深度所差的区间长度也为lowbit（i），例如要对 t[4] +1，则其后面的包含 t[4] 的 t[8]也进行+1。</p><p>因此当我们要求 6的前缀和，因该是6所包含的区间加上6包含区间的前面的区间，即是 t[4] + t[6]。</p><p>若求 3 到 6的区间和时，便是 前缀和 6 - 前缀和 2，而 前缀和 6 = t[6] +  t[4] ，所以3 到 6 的区间和便是  t[6] +  t[4] - t[2]       </p><p><img src="/picture/tree.png"></p><p>单点加值：</p><pre><code class="cpp">//包含a点的父亲位置都要加上bvoid add(int a,int b)&#123;    for(int i=a;i&lt;=n;i+=lowbit(i))        t[i]+=b;&#125;</code></pre><p> 前缀和：</p><pre><code class="cpp">//x所包含的区间和 + x区间前面所包含的区间和//x区间的长度为lowbit(x)int sum(int x)&#123;    int ans=0;    for(int i=x;i&gt;0;i-=lowbit(i))        ans+=t[i];    return ans;&#125;</code></pre><p>下面就是单点改值和区间和查询的问题</p><p><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1 - 洛谷 | 计算机科学教育新生态 </a></p><p>题目描述<br>如题，已知一个数列，你需要进行下面两种操作：</p><p>输入格式<br>第一行包含两个正整数 n,m，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含 n 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。</p><p>接下来 m 行每行包含 3 个整数，表示一个操作，具体如下：</p><p>这样子这道题就变得显而易见了</p><p>lowbit(x) 的返回值是x二进制最小位1，所以返回的是x&amp;-x，这里我用宏定义<br>对于lowbit(x), 我们从已学的计算机理论知识中得知计算机对两个数进行计算时,是将其转换为补码进行运算,而正数的补码又是其本身.</p><p>假设我们有一个整数 $x = (0 1 0 1 0)_B$, 我们有以下操作<br>$ x = (0 1 0 1 0)_B$   // x 的原码表示<br>$-x = (1 1 0 1 0)_B$   //-x 的原码表示<br>$-x = (1 0 1 1 0)_B$   //-x 的补码表示<br>$ x $&amp;$ (x) = $        //x 与 -x 按位与<br>$     (0 1 0 1 0)_B$   //x  的补码<br>&amp;    $(1 0 1 1 0)_B$   //-x 的补码<br>$=$  $(0 0 0 1 0)_B$   //按位与后的补码(同时也是原码)<br>于是我们便可以得出x在二进制位下最小1所表示的数值</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define PII pair&lt;int,int&gt;#define lowbit(x) x&amp;-x#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=5e5+10;int t[N],n,q;void add(int a,int b)&#123;    //父亲节点都 +b    for(int i=a;i&lt;=n;i+=lowbit(i))t[i]+=b;&#125;int sum(int x)&#123;    int ans=0;    前面每一段区间和    for(int i=x;i&gt;0;i-=lowbit(i))ans+=t[i];    return ans;&#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    cin&gt;&gt;n&gt;&gt;q;    rep(i,1,n)&#123;        int x;cin&gt;&gt;x;        add(i,x);    &#125;    while(q--)&#123;        int a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;        if(a==1)            add(b,c);        else             cout&lt;&lt;sum(c)-sum(b-1)&lt;&lt;endl;            //前缀和差    &#125;    return 0;&#125;</code></pre><p>还有区间改值和单点查询的问题，</p><p><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2 - 洛谷 | 计算机科学教育新生态 </a></p><p>题目描述<br>如题，已知一个数列，你需要进行下面两种操作：</p><p>输入格式<br>第一行包含两个整数 N、M，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含 N 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。</p><p>接下来 M 行每行包含 2 或 4 个整数，表示一个操作，具体如下：</p><p>操作 1： 格式：1 x y k 含义：将区间 [x,y] 内每个数加上 k；</p><p>操作 2： 格式：2 x 含义：输出第 x 个数的值。</p><pre><code>下标i    0  1  2  3  4  5  6  7    原数值a  0  1  2  1 -2  4  9  0差分值b  0  1  1 -1 -3  6  5 -9</code></pre><p>对于区间改值后的区间和，我们知道可以用差分做，那差分是什么呢，</p><p>差分 b[i] 就是 a[i] - a[i-1]  ，而 a[n] 可以用 表示（哈哈哈，公式好大个），当区间 [l，r] 内+x时，只需 b[l] +x，b[r+1] -x，即可保证只有区间内值增加</p><p>对于该题，我们不妨初始化差分数组为0，然后使次区间改值时对差分数组边界进行两次操作 </p><p>最后的单点查询就是改变的差分值加上原数值，即 sum(x) + a[x] </p><p>（以下用t数组代表差分数组，q数组表示原数值数组）</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define PII pair&lt;int,int&gt;#define lowbit(x)  x&amp;-x#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=5e5+10;int q[N],t[N],n,T;void add(int a,int b)&#123;    for(int i=a;i&lt;=n;i+=lowbit(i))t[i]+=b;&#125;int sum(int x)&#123;    int ans=0;    for(int i=x;i&gt;0;i-=lowbit(i))ans+=t[i];    return ans;&#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    cin&gt;&gt;n&gt;&gt;T;    rep(i,1,n)cin&gt;&gt;q[i];    while(T--)&#123;        int x,a,b,c;cin&gt;&gt;x;        if(x==1)&#123;            cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;            //差分边界进行操作            add(a,c);            add(b+1,-c);        &#125;else &#123;            cin&gt;&gt;a;            //单点查询值=差分数组前缀和+原数值            cout&lt;&lt;sum(a)+q[a]&lt;&lt;endl;           &#125;    &#125;    return 0;&#125;</code></pre><p>对于某些会越界的样例，必要时要int改long long。</p><p>今天刚学，有点囫囵吞枣，描述的不太清楚。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​&lt;strong&gt;树状数组处理区间问题&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="http://example.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="区间操作" scheme="http://example.com/tags/%E5%8C%BA%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>ST表</title>
    <link href="http://example.com/posts/9836/"/>
    <id>http://example.com/posts/9836/</id>
    <published>2022-08-15T14:20:14.000Z</published>
    <updated>2022-11-02T03:07:26.921Z</updated>
    
    <content type="html"><![CDATA[<p><strong>预处理区间最值O(nlogn)</strong></p><p><strong>查询O(1)</strong></p><span id="more"></span><p>对于一组长度为N的队列，进行M次询问，每次询问一个区间，查找该区间内的最大数值</p><p>如果用暴力枚举的话，时间复杂度最坏能到O(N<em>N</em>M)，当数据量大时肯定会TLE</p><p>ST表是一种预处理复杂度为O(logn)，查询复杂度为O(1)的一种查区间最值的方法，但是这种方法有缺陷，仅限于数据元素不变的静态表，当数据元素会实时发生变化时并不适用（用线段树解决动态区间最值问题，蒻苟还没学线段树，不会这个）</p><p>ST表，预处理二维数组 st [ i ][ j ]，其中表示数组中第 i 位置开始 2^j 个位置内的最值，所以对于int类型，j的范围就在30以下，该预处理二维数组的大小还是挺小的。<br><img src="https://img-blog.csdnimg.cn/f2d16d5a779b4335b95aac6aabbd4c28.png"><br>有点类似倍增，我们发现 st [ 3 ][ 2 ] 可以将2分成两个1，就是把2^2分成了2^1的两个部分，用 max ( st [ 3 ][ 1 ]，st [ 5 ][ 1 ] ) 两个部分来表示 st [ 3 ][ 2 ] 的区间最大值。</p><p>查询的时候先计算出查询区间的长度(我们需要找到一个最大的k满足2^k&lt;=len)，因为不能保证区间长度是2的次方，所以我们需要在区间内找到一个x值，使得 x + 2^k -1= r，因此</p><p>x=r-2^k+1 ，我们只需要查询 max ( st [ l ][ m ] ，st [ r - ( 1&lt;&lt;m ) + 1 ][ m ] ))即可</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)using namespace std;const int N=2e6+10;int st[N][30];//这个区间是左闭右开 是[N,N+2^30)int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    int n,q;cin&gt;&gt;n&gt;&gt;q;    rep(i,1,n)cin&gt;&gt;st[i][0]; 第i个位置到i+2^0位置的最值，[i,i+2^0)，左闭右开     rep(j,1,30)&#123;  //枚举区间的长度，从 2^0 → 2^30        for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;++i)&#123;   //           //防止数组值越界，因此区间右值不能超过数组右端点 i+(1&lt;&lt;j)-1            st[i][j]=max(st[i][j-1],st[i+(1&lt;&lt;j-1)][j-1]);        &#125;    &#125;    while (q--) &#123;        int l,r;cin&gt;&gt;l&gt;&gt;r;        int m=log(r-l+1)/log(2);        //l到r之间的长度大小（2的次方）        cout&lt;&lt;max(st[l][m],st[r-(1&lt;&lt;m)+1][m]))&lt;&lt;&#39;\n&#39;;    &#125;    return 0;&#125;</code></pre><p>当然，也可以用ST表查询最小值，静态区间最值问题都可以解决，要抓紧时间学学线段树了，马上就大二了。。。</p><p>附上洛谷 题目：<br><a href="https://www.luogu.com.cn/problem/P3865">P3865 【模板】ST 表 - 洛谷 | 计算机科学教育新生态 </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;预处理区间最值O(nlogn)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询O(1)&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ST表" scheme="http://example.com/categories/ST%E8%A1%A8/"/>
    
    
    <category term="倍增" scheme="http://example.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
    <category term="区间最值" scheme="http://example.com/tags/%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>二分图最大匹配</title>
    <link href="http://example.com/posts/30282/"/>
    <id>http://example.com/posts/30282/</id>
    <published>2022-08-15T14:09:14.000Z</published>
    <updated>2022-11-02T03:07:26.922Z</updated>
    
    <content type="html"><![CDATA[<p><strong>判断二分图</strong><br><strong>寻找最大匹配</strong></p><span id="more"></span><p>最近学点图论，总不能暑假啥都没学。</p><p>所谓二分图，就是对于左右两个集合，每个集合内的任意两点不连边，边只连接两个不同集合内的分别一点，如图（A集合有{1，2，3，4}，B集合{1，2，3，4}，两个集合的数量和元素都不需要相同）</p><p> <img src="https://img-blog.csdnimg.cn/67c0fcdb16dd4ebf9eca633d7b516fbc.png"><br> 以上的边练成的路径为A（1）→B（2），A（2）→B（1），这是二分图的一种成立条件，即单边无环，但还存在有环的情况，如下<br> <img src="https://img-blog.csdnimg.cn/01f6ad4ff7494948a243bb452fa4ce64.png"><br> 此时的环为A（1）→B（2）→A（3）→B（3）→A（1），此时环内一共有四个元素，可以可以证明的是，若当环内元素为奇数个时，该图必然不为二分图，<br><img src="https://img-blog.csdnimg.cn/d19613adb4b84d5e9248ff838ec57502.png"></p><p>若环内元素有奇数个时，？的位置必然为A，此时A→A与二分图定义矛盾，所以二分图内的环必为偶数环。</p><p>对于给定的一个带连边的图，可以用染色法判定二分图，</p><p>思路：我们可以把两个不同的集合中的元素染色为1和2。</p><p>遍历A中的每一个点，若该点未被染色，则染为1，然后顺着与该点相连的点，将其染为相反的颜色，若过程中发现有下一个点的颜色与当前点的颜色相同，则该图不是二分图。</p><pre><code class="cpp">#include&lt;bits/stdc++.h&gt;using namespace std;int const N=2e5+10;int h[N],ne[N],w[N],cnt=0;int color[N];void add(int a,int b)&#123;  //数组存连接点 ，和最短路存路径的方法相同    w[++cnt]=b,ne[cnt]=h[a],h[a]=cnt;&#125;bool dfs(int x,int u)&#123;    color[x]=u;    for(int i=h[x];i!=-1;i=ne[i])&#123;  //查找与该点相连的一条路到底        int j=w[i];        if(!color[j])&#123;   //用3-u来表示相反的颜色           if(!dfs(j,3-u))return false;        &#125;        else if(color[j]==u)return false;           //邻接点的颜色与当前点颜色相同，跳出    &#125;    return true;&#125;int main()&#123;    int n,m,k=1;cin&gt;&gt;n&gt;&gt;m;    memset(h,-1,sizeof h);    while (m -- )&#123;        int a,b;cin&gt;&gt;a&gt;&gt;b;        add(a,b);add(b,a);  //因为dfs的时候一条路到底，所以相反的路径也要加    &#125;    for(int i=1;i&lt;=n;++i)&#123;        if(!color[i])&#123;  //该点已经被染色            if(!dfs(i,1))&#123;  //染色失败，不为二分图                k=0;                break;            &#125;        &#125;    &#125;    if(k)cout&lt;&lt;&quot;Yes&quot;&lt;&lt;endl;    else cout&lt;&lt;&quot;No&quot;&lt;&lt;endl;&#125;</code></pre><p>ok，二分图判断完毕，开始匹配问题</p><p>上题：</p><p><a href="https://www.luogu.com.cn/problem/P3386">P3386 【模板】二分图最大匹配 - 洛谷 | 计算机科学教育新生态</a></p><p>所谓的匹配：就是在二分图中每个集合的元素只能连一条边，这两个元素的连接就是匹配。</p><p>最大匹配：在一个二分图中存在最多的匹配数量</p><p>完全匹配：两个集合中的全部元素都能匹配上</p><p><img src="https://img-blog.csdnimg.cn/f0ea624669094a99a0f71d138dd89838.png"><br>匈牙利算法可以帮助解决这个问题</p><p>如图绿线表示两点有连接，按遍历A集合的顺序来，我们先看A中点1，发现A（1）可以与B（2）连，就连这俩<br><img src="https://img-blog.csdnimg.cn/9400ab6d38d041db9ebc4b8b25e393ef.png"><br> 然后看A2的时候发现A2可以和B2连，也就连接他们<br> <img src="https://img-blog.csdnimg.cn/6878bce8b95840539836bdd316634018.png"><br> 然后到A3的时候，发现A3的第一个连接点B1已经被连了，这就是所谓的增广路了，一点被多个点所连接，这时候我们需要查看B1所连接的点有没有另外的连接点，发现A1还连接着B2，但B2被A2连接了，我们又看A2还另外连B3，而B3没有被连，那么我们就将A2连B3，于是A1就可以连B2，A3可以连B1了，知识点很少，挺容易看懂的</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define PII pair&lt;int,int&gt;#define INF 1&lt;&lt;30using namespace std;typedef long long ll;const int N=2e3+10;bool link[N][N];int p[N],st[N],n,m,e,ans=0;//p【i】=j  表示第二个集合中的i点和第一个集合中的j点匹配bool dfs(int x)&#123;    rep(i,1,m)&#123;        if(link[x][i]&amp;&amp;!st[i])&#123;   //如果该点和x点有连接，并且此时i点还没被用过           st[i]=1;           if(p[i]==0||dfs(p[i]))&#123;  //i点没有匹配的边，或者i点所匹配的边还有另外的匹配               p[i]=x;   //更新i的匹配点是x               return 1;           &#125;        &#125;    &#125;    return 0;&#125; int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    cin&gt;&gt;n&gt;&gt;m&gt;&gt;e;    while(e--)&#123;        int x,y;cin&gt;&gt;x&gt;&gt;y;        link[x][y]=1;   //x点和y点有连接    &#125;    rep(i,1,n)&#123;  //遍历第一个集合        memset(st,0,sizeof st);        if(dfs(i))ans++;  //如果该点匹配成功    &#125;    cout&lt;&lt;ans;    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;判断二分图&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;寻找最大匹配&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="http://example.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="二分图" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
    <category term="染色问题" scheme="http://example.com/tags/%E6%9F%93%E8%89%B2%E9%97%AE%E9%A2%98/"/>
    
    <category term="匈牙利算法" scheme="http://example.com/tags/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>codeforces804C</title>
    <link href="http://example.com/posts/34529/"/>
    <id>http://example.com/posts/34529/</id>
    <published>2022-07-05T14:23:47.000Z</published>
    <updated>2022-11-02T03:07:26.921Z</updated>
    
    <content type="html"><![CDATA[<p><strong>赛后补的题</strong></p><span id="more"></span><p>题目描述：</p><p>给定一个长度为n的数组a，其中每个a[i]的范围在0~n-1 且每个数仅出现一次 ，其中b数组满足对a和b数组任意的任意区间1&lt;=l&lt;=r&lt;=n，其中mex{a[l],a[l+1]…a[r]}==mex{b[l],b[l+1]…b[r]}，mex是求该区间内未出现的最小非负整数，如mex{1，2，3}=0，mex{0，1，2，3}=4，输出满足的b数组的个数</p><p>题解：</p><p>我们可以用p来存每个数字在a数组里的位置，初始l=r=p[0]，</p><p>然后遍历i从0~n-1，每次查看p[i]的位置是否在区间l到r内，</p><p>如果不在l到r内，更行区间，且说明这个位置的数放上去后是区间的边界，mex值在区间改变后也会发生改变，改位置就是固定的，ans不做处理</p><p>如果在l到r内，因为i之前的数组的位置都已经找过了，而l和r的位置也存的是i之前的数，那么在这个区间内，除了已经找过的数，其他任意位置是可以随意放的，这时候的任意位置个数就是r-l+1-i，（注意这里的i意思是已经确定了i个数，如果减去，就意味着还有这么些个位置没有放），所以ans*=（这些位置个数）</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define INF 0x3f3f3f3fusing namespace std;typedef long long ll;const int N=100050;const ll MOD=1e9+7;ll a[N];map&lt;ll,ll&gt;p;void solve()&#123;    int n;cin&gt;&gt;n;    p.clear();    rep(i,1,n)&#123;        cin&gt;&gt;a[i];        p[a[i]]=i;   //记录每个数在数组a的位置    &#125;    ll l=p[0],r=p[0]，ans=1;   //初始化区间和答案    rep(i,1,n-1)&#123;        if(p[i]&gt;l&amp;&amp;p[i]&lt;r)&#123;             ans*=1LL*(r-l+1-i);  //ans*(区间内未出现过数的位置)             ans%=MOD;        &#125;        l=min(l,p[i]);        r=max(r,p[i]);    &#125;    cout&lt;&lt;ans&lt;&lt;endl;&#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    int n;cin&gt;&gt;n;    while(n--)solve();    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;赛后补的题&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeforces" scheme="http://example.com/categories/codeforces/"/>
    
    
    <category term="思维" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra</title>
    <link href="http://example.com/posts/53359/"/>
    <id>http://example.com/posts/53359/</id>
    <published>2022-06-13T14:24:30.000Z</published>
    <updated>2022-11-02T03:12:07.518Z</updated>
    
    <content type="html"><![CDATA[<p><strong>堆优化的dijkstra板子</strong>*</p><span id="more"></span><p>对于单源最短路的问题，目前已知最快的解决算法就是堆优化处理过的dijkstra（条件当然是不存在负边的情况下，若存在负边的情况则要用spfa辽，但是蒻苟不会嘻嘻🤭）</p><p>dijkstra的本质是贪心，对于求目标两个位置间的最短权边和，查找从起点位置到每个点的最短距离，同时更新与该当前点相关的点的距离。</p><p>这种存图方式只需要开一个数组存储每个点引出的第一条边，然后存储每个点作为起点的每条边，这样就可以做到不重不漏。</p><p>在链式前向星存图中，我们需要定义一个结构体：</p><pre><code class="cpp">struct EDGE &#123;    int next;    int to;&#125;edge[1000000];</code></pre><p>和一个数组</p><pre><code>int head[1000000];</code></pre><p>和一个变量：</p><pre><code>int cnt=0;//指针</code></pre><p>你会发现竟然没存起点！！其实起点是用headhead存的</p><p><strong>举例：</strong><br><img src="https://img-blog.csdnimg.cn/4251f50ed86040a7bcb9cc38c9a646e4.png"><br>如图：这样的一个有向图，输入是：</p><pre><code>1 21 31 42 3</code></pre><p><strong>逐步分析：</strong><br>1.输入1 2，代表1连向2。</p><pre><code>cnt++;//作为结构体下标，没有意义head[1]=cnt;//结点1的第一个儿子存在了edge[cnt]里面edge[cnt].to=2;结点1的儿子是2</code></pre><p>此时： cnt=1</p><p><img src="https://img-blog.csdnimg.cn/b685f2dda2604fc5bf0ae668134aa5a5.png"></p><p>2.输入1 3，代表1连向3。</p><pre><code>cnt++;head[1]=cnt;edge[cnt].to=3;结点1的儿子是3//这时,3成为了结点1的儿子，不过2被挤了下去...//所以要引入结构体中next元素，记录：3还有个兄弟（next）是2//所以代码要换成：cnt++;edge[cnt].to=3;//结点1连向3edge[cnt].next=head[1];//3的兄弟是2head[1]=cnt;//更新head</code></pre><p>此时： cnt=2<br><img src="https://img-blog.csdnimg.cn/d1790bebf3bd4e1997bdb8e6808cb914.png"><br>3.输入1 4，代表1连向4。<br>此时cnt=3<br><img src="https://img-blog.csdnimg.cn/f7c6347d69b14f3d9cb6a7a23a2d2cdf.png"><br>4.输入2 3，代表2连向3。</p><p>此时： cnt=4<br><img src="https://img-blog.csdnimg.cn/94eec493c18b481eb72a64f8db4ade5c.png"><br>可以理解的是，next存的是当前结点连接的最近的兄弟结点的下标，如1-&gt;2，1-&gt;3，1-&gt;4，则4的next是3，3的next是2。</p><p>而head 存的是当前结点指向的最远的结点的下标，1-&gt;2，1-&gt;3，则head [1] =3，</p><p>对于带权值的问题，在结构体中加入一个元素记录权值即可</p><p>代码：(带权值）</p><pre><code class="cpp">#include&lt;iostream&gt;using namespace std;struct edge &#123;     int next;    int to;    int wei;&#125;edge[MAXM];int head[MAXN];//head[i]为i点的第一条边int cnt=0;void addedge(int u,int v,int w) //起点，终点，权值 &#123;    edge[++cnt].next=head[u];//更新cnt    edge[cnt].to=v;    edge[cnt].w=w;    head[u]=cnt;&#125;int main()&#123;    int n;    for(int i=1;i&lt;=n;i++)    &#123;        int a,b,wei;        addedge(a,b,wei);        //如果是无向图，还要addedge(b,a,wei);    &#125;&#125;</code></pre><p><strong>边的遍历</strong></p><p>在遍历以x为起点的所有边时，只需要这样就行</p><pre><code>    for(int i=head[x];i!=0;i=edge[i].next)</code></pre><p>这个循环的结束条件是i等于0，因为最后一条边，也就是存边时第一条边，在把head值存进next时，head还没有更新过，也就是0。所以当next返回0时，就说明这些边遍历完毕了。</p><p><strong>代码</strong><br><strong>堆优化</strong></p><p>在寻找最短值的时候，用优先队列priority_queue&lt;pair&lt;int,int&gt;&gt;来存储，其中的pair中记录的分别是每条边的权值和终点结点。</p><p>优化完成后的总复杂度为O(mlogn)</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)#define INF 0x3f3f3f3fusing namespace std;typedef long long ll;const int N=250010;int head[N],ne[N],to[N],w[N],dist[N];// head记录当前结点连接的最远结点的下标，ne记录当前结点连接的最近结点的下标，//to记录当前边指向的结点，w记录权值，dist记录目标起点到各个点的最短距离bool st[N];  //记录当前结点是否已经找到最短距离int n,m,s,cnt=0;  //cnt是记录每次数据的指针，相当于下标void addw(int a,int b,int c)&#123;    w[++cnt]=c;    to[cnt]=b;    ne[cnt]=head[a];  //更新指向最近结点的下标    head[a]=cnt;  //更新指向最远结点的下标&#125;void Dijkstra()&#123;    priority_queue&lt;pair&lt;int,int&gt;,vector&lt;pair&lt;int,int&gt;&gt;,greater&lt;pair&lt;int,int&gt;&gt;&gt; heap;    //优先队列自带的排序函数greater，使得默认按第一个元素升序排序    heap.push(&#123;0,s&#125;);dist[s]=0;  //s记录的是所求起点，将其放入堆中，距离为0，终点是其自己    while(!heap.empty())&#123;        pair&lt;int,int&gt; temp=heap.top();        heap.pop();     //弹出权值最小的点，待处理        int x=temp.first,y=temp.second;          if(st[y])continue;  //如果该点已经找到最短距离，则跳过        st[y]=true;  //更新该点已经找到最短距离        for(int i=head[y];i!=0;i=ne[i])&#123;  //遍历与该点连接的结点            int t=to[i];                if(dist[t]&gt;x+w[i])&#123;  //找到连接的可更新的最短结点                dist[t]=x+w[i];  //更新权值路径                heap.push(&#123;dist[t],t&#125;);  //把该更新过的结点放到堆中待处理            &#125;        &#125;    &#125;&#125;int main()&#123;    cin&gt;&gt;n&gt;&gt;m;    memset(dist,INF,sizeof(dist)); //初始化距离无穷大    for(int i=1;i&lt;=m;++i)&#123;        int a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;        addw(a,b,c);    &#125;    Dijkstra();    rep(i,1,n)cout&lt;&lt;dist[i]&lt;&lt;&#39; &#39;;    return 0;&#125;</code></pre><p>带负权边问题的spfa算法之后再考虑学不学🙄🙄🙄🙄</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;堆优化的dijkstra板子&lt;/strong&gt;*&lt;/p&gt;</summary>
    
    
    
    <category term="Dijkstra" scheme="http://example.com/categories/Dijkstra/"/>
    
    
    <category term="最短路" scheme="http://example.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    <category term="单源" scheme="http://example.com/tags/%E5%8D%95%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>codeforces792BCD</title>
    <link href="http://example.com/posts/18293/"/>
    <id>http://example.com/posts/18293/</id>
    <published>2022-05-20T14:35:15.000Z</published>
    <updated>2022-11-02T03:07:26.923Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这么好的日子宅寝室写题解</strong><br><strong>QAQ</strong></p><span id="more"></span><p> B：</p><p>题意：输入题目给定的a，b，c，（其中a&lt;b&lt;c）求三个值x，y，z 使得满足</p><p>x mod y = a,     1</p><p>y mod z = b,     2</p><p>z mod x = c      3</p><p>输出任何满足条件的x，y，z</p><p>题解：要求任意满足条件的三个值互相取模得到输入值，我们不妨假设一个输出的值就是其对应的输入值，如y=b，此时要求得另外两解，我们可以对a和c进行调用，我们可以发现以下规律，但是这会有一个特殊情况，因为c使最大的，所以 a+b+c&lt;3*c，a+b+c 可能是  a+b 的整数倍 ，所以固定y值时可能出现第三个条件不满足的情况，所以我们应该固定最大的z对应的c值。<br><img src="https://img-blog.csdnimg.cn/257a77cfcb7f4f9aa21a14a74f519511.png"></p><pre><code class="cpp">#include&lt;iostream&gt;using namespace std;void solve()&#123;    int a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;    cout&lt;&lt;a+b+c&lt;&lt;&#39; &#39;&lt;&lt;b+c&lt;&lt;&#39; &#39;&lt;&lt;c&lt;&lt;endl;&#125;int main()&#123;    int n;cin&gt;&gt;n;    while(n--)solve();&#125;</code></pre><p> C ：</p><p>题意：</p><p>对每组数据输入 n * m (1 ≤  n, m ≤ 2⋅10^5 )的矩阵，其中每个位置的值不超过10^9，要求对换两列元素使得矩阵每行非递增，输出对调的两列下标，若不存在满足情况的两列则输出 -1</p><p>题解：</p><p>先找到任一 一行的非递减的的位置下标存入数组bb，记该行不满足的下标数量为num，若num大于2则直接输出 -1，若 num==0 即矩阵本就满足情况，输出1  1，若以上情况都不存在即num==2的时候，对调矩阵中每行该下标位置的元素值，然后遍历每一行元素判断是否非递减排列，若不满足输出-1，否则最后输出 两个下标位置。</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)using namespace std;typedef long long ll;;void solve()&#123;    int n,m;cin&gt;&gt;n&gt;&gt;m;    vector&lt;vector&lt;int&gt;&gt; a(n,vector&lt;int&gt;(m));    vector&lt;int&gt; bb;    rep(i,0,n-1)        rep(j,0,m-1)            cin&gt;&gt;a[i][j];   //输入每个元素值            for(int i=0;i&lt;n&amp;&amp;bb.empty();++i)&#123;           //当下标越界或者该行发现有不满足条件的元素出现时跳出        vector&lt;int&gt; b=a[i];        sort(b.begin(),b.end());  //对数组b排序，然后对原数值进行比较        for(int j=0;j&lt;m;++j)&#123;            if(a[i][j]!=b[j])bb.push_back(j);  //加入不满足的下标        &#125;    &#125;    if(bb.size()==0)&#123;cout&lt;&lt;1&lt;&lt;&#39; &#39;&lt;&lt;1&lt;&lt;endl;return ;&#125;  //不存在不满足的情况    else if(bb.size()&gt;2)&#123;cout&lt;&lt;-1&lt;&lt;endl;return ;&#125;   //不满足的情况太多，&gt;2    rep(i,0,n-1)swap(a[i][bb[0]],a[i][bb[1]]);    //否则交换两列数值    rep(i,0,n-1)&#123;        rep(j,0,m-2)&#123;            if(a[i][j]&gt;a[i][j+1])&#123;       //判断是否满足条件                cout&lt;&lt;-1&lt;&lt;endl;                return ;            &#125;        &#125;    &#125;    cout&lt;&lt;bb[0]+1&lt;&lt;&#39; &#39;&lt;&lt;bb[1]+1&lt;&lt;endl;  //因为记的下标是从0开始的，所以记得+1    &#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);    int n;cin&gt;&gt;n;    while(n--)solve();    return 0;&#125;</code></pre><p>天啦噜，昨晚开a【200001】【200001】的数组爆栈了，麻木了我一个多小时，今天学到了个新招 ，用vector 开二维，就 vector&lt;vector<int>&gt; a(n,vector<int>(m)); 这样写，是 n * m 的二维数组。</p><p>D</p><p>题意：每组数据给定 n 个陷阱的伤害值，k 次跳越一个陷阱的机会，每跳过一个陷阱，后面所有的陷阱伤害值都会 +1，求经过所有陷阱后所受伤害的 最小值。</p><p>题解：</p><p>当所有的陷阱都要跳进去时，所受伤害就是每个陷阱伤害值的和 ans，对于每一个陷阱，如果跳过当前的陷阱，对于整体所受的伤害 ans 就是 ans = ans - a [ i ] +( n - i )  = n - i - a [ i ] ，而对于当前跳的第 j 个陷阱，若跳过该陷阱 ，后面还有 k - j 次机会可以跳，即还有k - j 个陷阱的+1 不用算到ans之中去，所有对于k次机会，一共有 （k - 1）*k / 2点伤害不用承受。</p><p>我们只需求出跳越每个陷阱对整体所减少的伤害值，并贪心求最大减伤即可。</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define rep(i,n,m) for(int i=n;i&lt;=m;++i)#define per(i,n,m) for(int i=n;i&gt;=m;--i)//#define INF 0x3f3f3f3fusing namespace std;typedef long long ll;const int N=200010;void solve()&#123;    ll n,k,ans=0;cin&gt;&gt;n&gt;&gt;k;        vector&lt; ll &gt;a(n);        for(int i=0;i&lt;n;++i)&#123;        int x;cin&gt;&gt;x;        ans+=x;      //计总伤害值        a[i]=1LL*(n-i-1-x);   //记得取1LL，不然会超范围    &#125;            sort(a.begin(),a.end());       rep(i,0,k-1)  ans+=a[i];  //贪心使伤害最小化     cout&lt;&lt; ans - ( k * (k-1) / 2 )&lt;&lt;endl;  //减去对当前跳过的陷阱后面跳过的陷阱+1的伤害&#125;int main()&#123;    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);    int n;cin&gt;&gt;n;    while(n--)solve();    return 0;&#125;</code></pre><p>cf分天天掉，上绿还没稳住一直拼命往下掉，<del>蒻苟本狗</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;这么好的日子宅寝室写题解&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;QAQ&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeforces" scheme="http://example.com/categories/codeforces/"/>
    
    
    <category term="思维" scheme="http://example.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="贪心" scheme="http://example.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>区间数据离散化</title>
    <link href="http://example.com/posts/33421/"/>
    <id>http://example.com/posts/33421/</id>
    <published>2022-04-27T14:38:55.000Z</published>
    <updated>2022-11-02T03:11:00.671Z</updated>
    
    <content type="html"><![CDATA[<p><strong>区间区间又是区间…</strong></p><span id="more"></span><p> 对于一类范围很大，而实际用到的范围又很小的题目，如下题，数轴上的范围2*10^9次，而实际上有操作过的个数最多有n个，如果用前缀和计算该题的话在数据小的情况下是可以做的，但是本题范围若有前缀和的话遍历加每一个值也必然会tle，这时候我们就用到了离散化这个方法</p><p>**AcWing 802. 区间和 **  </p><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。</p><p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 c。</p><p>接下来，进行 m 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。</p><p>输入格式</p><p>第一行包含两个整数 n 和 m。</p><p>接下来 n 行，每行包含两个整数 x 和 c。</p><p>再接下来 m 行，每行包含两个整数 l 和 r。</p><p>输出格式</p><p>共 m 行，每行输出一个询问中所求的区间内数字和。</p><p>数据范围</p><p>−10^9≤x≤10^9<br>1≤n,m≤10^5<br>−10^9≤l≤r≤10^9<br>−10000≤c≤10000</p><p>输入样例：</p><pre><code>3 31 23 67 51 34 67 8</code></pre><p>输出样例：</p><pre><code>805</code></pre><p>题解： </p><p>把需要操作的位置都放到 all 数组里，对于操作的数据我们放在 add 内，对于要查询的区间我们放在 query 内，此外我们定义一个 find（x） 函数来查找数值为x的值在 all 数组内的下标，在放完所有数据之后，我们要对 all 数组内的值整理一次，先用sort使数据有序排列，这样才能保证在用find查找下标的时候有效进行，然后还得对 all 数组内相同的数据进行清除，然后遍历 add 内的值，给a数组进行赋值，再对all遍历计算有效前缀和，最后遍历query输出答案</p><pre><code>例如: 在最以下数据进行操作之后   1 2   3 6   7 5    1 3   4 6   7 8 读取数据之后各vector的内容    add&#123;&#123;1,2&#125;,&#123;3,6&#125;,&#123;7,5&#125;&#125;    query&#123;&#123;1,3&#125;,&#123;4,6&#125;,&#123;7,8&#125;&#125;    all&#123;1,3,7,1,3,4,6,7,8&#125; 对all排序去重之后为      all&#123;1,3,4,6,7,8&#125;   //即在数轴上就用到了这些位置      先遍历add对a数组进行操作后     a &#123;2， 6 ，0， 0 ， 5 ，0 &#125;      然后用sum计算a内的前缀和      sum&#123;2 , 8 , 8 , 8 , 13, 13 &#125;         然后遍历query内的值，对sum中的范围进行求差（得用find查找all中下标）      而对应的sum下标和值即为         0   1   2   3   4   5   sum &#123;2 , 8 , 8 , 8 , 13, 13 &#125;     all&#123;1,  3,  4,  6,   7,  8 &#125;     所以对以下三个区间      1 3      4 6      7 8   三个用find查找的下标区间为      0 1      2 3      4 5   计算得出答案</code></pre><p>   代码呈上😉😉😉😉 </p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define repp(i,n,m) for(int i=n;i&lt;=m;++i)#define reps(i,n,m) for(int i=n;i&gt;=m;--i)#define INF 0x3f3f3f3fusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; PII;const int N=300010;int a[N],sum[N];vector&lt;PII&gt; add,query;vector&lt;int&gt;all;int find(int x)&#123;    //离散化查找下标 int l=0,r=all.size()-1; while(l&lt;r)&#123;     int mid=l+r&gt;&gt;1;     if(all[mid]&gt;=x)r=mid;     else l=mid+1; &#125; return r+1;&#125;int main()&#123; ios::sync_with_stdio(0);cin.tie(0); int n,m;cin&gt;&gt;n&gt;&gt;m; repp(i,1,n)&#123;        //数据读入     int x,y;cin&gt;&gt;x&gt;&gt;y;     add.push_back(&#123;x,y&#125;);     all.push_back(x); &#125; repp(i,1,m)&#123;     int x,y;cin&gt;&gt;x&gt;&gt;y;     query.push_back(&#123;x,y&#125;);     all.push_back(x);     all.push_back(y); &#125;  sort(all.begin(),all.end());        //排序+去重 all.erase(unique(all.begin(),all.end()),all.end());  for(auto it:add)&#123;        //赋值操作     int x=find(it.first);     a[x]+=it.second; &#125;   repp(i,1,all.size()) sum[i]=sum[i-1]+a[i];   //前缀和计算  for(auto it : query) &#123;                       //区间和     int l=find(it.first),r=find(it.second);     cout&lt;&lt;sum[r]-sum[l-1]&lt;&lt;endl; &#125; return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;区间区间又是区间…&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据离散化" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
    
    <category term="区间操作" scheme="http://example.com/tags/%E5%8C%BA%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    
    <category term="二分" scheme="http://example.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>最大矩阵和</title>
    <link href="http://example.com/posts/18136/"/>
    <id>http://example.com/posts/18136/</id>
    <published>2022-04-26T18:43:34.000Z</published>
    <updated>2022-11-02T03:07:26.922Z</updated>
    
    <content type="html"><![CDATA[<p><strong>蒻苟的学习记录</strong></p><span id="more"></span><p>题目：给定一个n✖n大小的矩阵，求其中子矩阵的和最大值（来自洛谷p1719）<br><img src="https://img-blog.csdnimg.cn/a2ffc98c905d402a86b43906a549d895.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_16,color_FFFFFF,t_70,g_se,x_16"><br>求一个方向上的前缀和，该方法计算矩阵竖直方向上的前缀和 a[i][j]=a[i-1][j]+x ，然后用 i 和 j 确定子矩阵行坐标的范围，即第 j 行到第 i  行，然后再循环一个k来计算子矩阵内从第1列到第k列的和，若和为负值了就重新计算子矩阵（当然本道题的限制是答案是正数，若要突破这个限制，即把判断sum&lt;0改成sum&lt;ans就行啦）</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;#define N 10010#define rep(i,a,b)  for(int i=a;i&lt;=b;++i)  using namespace std;typedef long long ll;int a[N][N],s[N][N],n,ans=-0x3f3f3f3f;int main()                //初始ans为极小值&#123;    cin&gt;&gt;n;    rep(i,1,n)&#123;        rep(j,1,n)&#123;            int x;            cin&gt;&gt;x;            a[i][j]=a[i-1][j]+x;        &#125;   //累加竖直方向上的前缀和    &#125;    rep(i,1,n)&#123;        rep(j,0,i-1)&#123;            int sum=0;            rep(k,1,n)&#123;   //循环加j到i行之间的子矩阵和，                sum+=a[i][k]-a[j][k];                  if(sum&lt;0)sum=0;    //如果和小于0则初始化sum                ans=max(ans,sum);            &#125;        &#125;    &#125;    cout&lt;&lt;ans;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;蒻苟的学习记录&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="矩阵" scheme="http://example.com/categories/%E7%9F%A9%E9%98%B5/"/>
    
    
    <category term="最值" scheme="http://example.com/tags/%E6%9C%80%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>并查集初步学习</title>
    <link href="http://example.com/posts/41303/"/>
    <id>http://example.com/posts/41303/</id>
    <published>2022-04-10T14:47:30.000Z</published>
    <updated>2022-11-02T03:10:05.677Z</updated>
    
    <content type="html"><![CDATA[<p><strong>树的关系图欸</strong></p><span id="more"></span><p>当我们面对许多数据量（且其中某一部分数据之间相互有联系的时候），如下六个元素，1和2之间连接，3、4和5相互连接，在处理某部分问题的时候十分难处理，因此聪明的人类引出了并查集这个概念方法来解决问题，可以将分别联系的数据整理成一颗颗分叉的树。（好耶~）<br><img src="https://img-blog.csdnimg.cn/0e8829a7b00849cba2bf77ecbfe30ddc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>并查集是将所有元素分为几个集合，每个集合内的元素互相连接，用广泛的介绍就是，如果A和B是好朋友，B和C是好朋友，虽然A和C不认识，但是通过B的介绍，A和C也能成为好朋友，这样ABC都能在一个集合内，这如同树一般的分叉连接，并且不同的集合内不会有共同的元素<br><img src="https://img-blog.csdnimg.cn/9015ccbb7cd747d8ba16671423b99baf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>1、并查集的find函数</p><p>对于并查集的实用，主要有两个函数，一个是find函数，用于查找该元素的头元素，对于以下途中的元素可知，A，C，D的头元素都是B，此时B元素就是该集合的老大。<br><img src="https://img-blog.csdnimg.cn/f8de6a95a3154c5ca5c0ad42c7eb2858.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_10,color_FFFFFF,t_70,g_se,x_16"></p><pre><code class="cpp">int pre[100];   //对数组f，f[i]=j中表示i元素的上一层元素是jint find ( int n )&#123;    int head=n;    while(pre[head]!=head) //一直查找没有最上面一层的元素，相当于一个集合的boss吧        head=pre[head];     //part 2      //*路径压缩     int i=n,j;        while(i!=head)&#123;            j=pre[i];      //j是i的前一元素        pre[i]=head;          i=j;    &#125;    //压缩结束    *//     return head;    &#125;</code></pre><p>如果我们不进行路径压缩那部分的话就会发现，每次要查找一个元素的老大的话，都要一直往上一层循环找，当层数很大的时候就很费时间复杂度，这时候我们就可以用路径压缩，使得在一个元素往上找老大的过程中遇到的元素都直接指向老大，如图<br><img src="https://img-blog.csdnimg.cn/dc1a0e29ca69489a91825f43cc2b1428.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_14,color_FFFFFF,t_70,g_se,x_16"></p><pre><code class="cpp">void join(int i,int j)&#123;    int x=pre[i],y=pre[j];  //x和y分别是i和j的老大    if(x!=y)  pre[x]=y ;  //如果i和j的老大不是是同一个人          //让j组织的老大的成为i组织老大的老大&#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/362b5461c2f541c396e156e975ebac10.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"><br> 这时候合并的两组织层数用树来看还是比较长的，可以用find一次来压缩一下路径使得ABCEH属于同一层。</p><p><strong>例题来自ACWing</strong></p><p><img src="https://img-blog.csdnimg.cn/dc1bac1ba2e54292bdca747ff8a8d56b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWz5Lq65Y-q5Lya5b2x5ZON5oiR5pWy5Luj56CB55qE6YCf5bqmUUFR,size_16,color_FFFFFF,t_70,g_se,x_16"><br>这道题用主要用贪心的思想，同时加上并查集的优化，先求出最大的保质期时间，然后对于每一天的的头元素都是改天的日期，在从利润最大的商品往最小的商品遍历的时候，如果说对保质期使i的商品，若pre [ i ] == i，那么可以说明这一天的还没有卖出东西，所以可以把目前利润最大的卖了，同时使得目前该保质期的商品的 pre [ i ] = i - 1，即使得保质期为i的头元素为 i - 1， 这样当遇到第二大利润且保质期也是 i 的时候这个商品只能在该保质期的前的第 i - 1 天卖，从前往后的头元素表示着可以卖出商品的时间，如果该时间等于0了也说明天数卖完了</p><p>这题里用的并查集pre [ i ] = j 表示在第 i 天之前距 i 最近的还未出售过商品的日期是 j ，在每用完第j天后更新 j = j - 1，使得某天后面的pre [ i ]都与前面空闲的某天直接联系。</p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;using namespace std;#define N 10010int n, pre[N];pair&lt;int, int&gt; good[N];  //存储每一个货物的利润和保质期void solve() &#123;    int day=0, num=0;    for (int i=1;i&lt;= n;i++) &#123;        cin&gt;&gt;good[i].first&gt;&gt;good[i].second;        day=max(day,good[i].second);  //取得一个最晚过期时间    &#125;    sort(good+1,good+n+1);  // 对利润从小到大排序    for(int i=0;i&lt;= day;i++)  pre[i] = i;//初始化每一天的头元素         //    利用路径压缩, 可以快速找出从过期时间往前数第一个空闲的天数    for(int i=n;i&gt;0;i--)&#123;        int r=findd(good[i].second);  //获取利润最大的商品的过期日期        if(r!=0)&#123;                   //如果这个&quot;位置&quot;还没有被用掉            num+=good[i].first;     //更新答案                    pre[r]=r-1;   //合并两个集合(r与r-1)-&gt; 把这个&quot;位置&quot;指向他前一个&quot;位置&quot;        &#125;    &#125;    cout&lt;&lt;num&lt;&lt;endl;&#125;int findd(int x) &#123;    if (x==pre[x]) return x;       return pre[x]=findd(pre[x]);  //路径压缩&#125;int main()&#123;    while(cin&gt;&gt;n) &#123;        solve();    &#125;    return 0;&#125;</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;树的关系图欸&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="图论" scheme="http://example.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="数组" scheme="http://example.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="并查集" scheme="http://example.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
</feed>
